import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as e,o as i}from"./app-zr_u58Lo.js";const a={};function r(s,n){return i(),t("div",null,n[0]||(n[0]=[e('<h1 id="数据链路层" tabindex="-1"><a class="header-anchor" href="#数据链路层"><span>数据链路层</span></a></h1><h2 id="数据链路层基本服务" tabindex="-1"><a class="header-anchor" href="#数据链路层基本服务"><span>数据链路层基本服务</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gvi5r4frp0j613x0u0gob02.jpg" alt="数据链路层基本服务" tabindex="0" loading="lazy"><figcaption>数据链路层基本服务</figcaption></figure><p>数据链路层要解决的问题：分组在一个网络（或一段链路）上传输的问题。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grnnx8snwxj31re0u0dlw.jpg" alt="image-20210619163057241" tabindex="0" loading="lazy"><figcaption>image-20210619163057241</figcaption></figure><ul><li>帧，是链路上的数据单元。数据链路层<mark>关注3个重点问题</mark>：封装成帧，差错检测，可靠传输。</li></ul><p>链路层提供以下服务（4个）：</p><ul><li><strong>组帧。<strong>将数据封装成</strong>帧</strong>。<strong>帧头</strong>包含发送结点和接收结点的地址信息；<strong>帧尾</strong>包含用于差错检测的控制编码。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cm9guyj312g0ca0uj.jpg" alt="截屏2020-10-09 23.13.07" tabindex="0" loading="lazy"><figcaption>截屏2020-10-09 23.13.07</figcaption></figure><ul><li>**链路接入。**两种接入方式：<strong>点对点链路</strong>、<strong>广播链路（需借助MAC协议，才可实现帧的正确传输）</strong>。 <ul><li>点对点：需关注组帧、差错控制、可靠交付3个问题。</li><li>广播：基于<strong>CSMA/CD协议</strong>的共享式以太网的媒体接入控制协议、基于<strong>CSMA/CA协议</strong>的802.11局域网的媒体接入控制协议</li></ul></li><li><strong>可靠交付。</strong></li><li>**差错控制。**只要有数据传输的地方，就肯定有出错的几率，故需采取降低错误的措施，如：检错重发、前向纠错，检错丢弃、反馈校验。</li></ul><h2 id="差错控制-100°" tabindex="-1"><a class="header-anchor" href="#差错控制-100°"><span>差错控制 <mark>100°</mark> *</span></a></h2><blockquote><p><strong>概念</strong></p></blockquote><ol><li><p>通过<strong>差错编码</strong>技术检测<strong>数据完整性</strong>；</p></li><li><p>通过一些<strong>措施</strong>进行差错<strong>纠正</strong>和<strong>处理</strong>；</p></li><li><p><strong>是实现可靠传输的重要技术手段</strong>。</p></li></ol><p><mark>噪声的影响</mark></p><p>之所以会发生传输差错，和噪声有关。</p><p>分类：随机噪声（热噪声）、冲击噪声（电闪雷鸣）。</p><p>影响：随机噪声产生随机差错，冲击噪声产生突发差错。<strong>（影响力：突发＞随机）</strong></p><blockquote><p><strong>方式</strong>：巧记：”两检，一前一反“</p></blockquote><p><strong>检错重发</strong></p><p>发送端：对<strong>待发送的数据</strong>进行==<strong>差错编码</strong>==。</p><p>接收端：对<strong>已接收的数据</strong>进行<strong>差错检测</strong>，有误则反馈给发送端并请求重发，直至正确。</p><p><strong>前向纠错</strong></p><p>发送端：对待发送的数据进行纠错编码。</p><p>接收端：对已接收的数据进行差错检测，有误则直接纠错。</p><p>适用于：单工链路、或实时性高的应用。</p><p><strong><s>反馈校验</s></strong></p><p>发送端：直接发数据</p><p>接收端：发回已经收的数据给发送端。</p><p>发送端：检测回送的数据是否正确，有误则重发，直至正确</p><p>【考点】<strong><mark>反馈检验无需差错编码</mark></strong>，不建议使用，效率低，实时性差。</p><p><strong>检错丢弃</strong></p><p>数据有误，就丢弃。</p><h2 id="差错编码-100°" tabindex="-1"><a class="header-anchor" href="#差错编码-100°"><span>差错编码 <mark>100°</mark> **</span></a></h2><p>差错编码的基本原理：在源数据上<strong>附加一定的冗余信息</strong>，该冗余信息建立起数据信息的某种关联关系，将数据信息以及附加的冗余信息一同发送到接收端，接收端可以检测冗余信息表征的数据信息的关联关系是否存在，如果存在则没有错误，否则就有错误。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cbzcmfj30ic0dkdg6.jpg" alt="差错编码 *" tabindex="0" loading="lazy"><figcaption>差错编码 *</figcaption></figure><h3 id="奇偶校验码" tabindex="-1"><a class="header-anchor" href="#奇偶校验码"><span><strong>奇偶校验码</strong></span></a></h3><p><em>约定：待发送数据的格式为二进制位串，如1001001001101</em></p><p>校验方式：<strong>在<mark>待发送数据后面</mark><strong>添加</strong>1位奇偶检验位</strong>，使得整个位串中“1”的个数为奇数（奇校验）、或偶数（偶校验），<strong><mark>奇校验奇数个1，偶校验偶数个1</mark></strong>。</p><p>实例：待发送的数据 101101</p><p>注：（粗体为校验位）（高亮部分为误码）</p><p>奇校验时：</p><p><strong>1</strong>101101​ → <strong>1</strong>10110<mark>0</mark></p><p><strong>1</strong>101101 → <mark><strong>0</strong><mark>1</mark>1</mark>1101</p><p>偶校验时</p><p><strong>0</strong>101101 → <strong>0</strong>1011<mark>1</mark>1</p><p><strong>0</strong>101101 →==<strong>1</strong>==<mark>0</mark>01101</p><p>结论：奇变偶不变，有变就能检测出误码。</p><h3 id="crc循环冗余码" tabindex="-1"><a class="header-anchor" href="#crc循环冗余码"><span><strong>CRC循环冗余码</strong> <mark>*</mark></span></a></h3><p><em>广泛使用，检错能力强，编码效率高，易于实现。</em></p><p><strong>应试技巧</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgwtgjr2hj30ry05fjsj.jpg" alt="IMG_22610737118A-1" tabindex="0" loading="lazy"><figcaption>IMG_22610737118A-1</figcaption></figure><p><strong>实现方式</strong></p><ul><li>收发双方约定好一个生成多项式G(X)</li><li>发送方：数据位串+<mark>冗余码（通过G(X)计算得到）</mark></li><li>接收方：利用生成多项式G(X)测试数据是否产生无码。</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgx59bjx1j30ne0g8aeu.jpg" alt="image-20210613203728468" tabindex="0" loading="lazy"><figcaption>image-20210613203728468</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgx5wr353j30nk0gitc1.jpg" alt="image-20210613203805277" tabindex="0" loading="lazy"><figcaption>image-20210613203805277</figcaption></figure><p><strong>示例：</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgxdjqo22j31bj0u0k5i.jpg" alt="IMG_8853119ECF48-1" tabindex="0" loading="lazy"><figcaption>IMG_8853119ECF48-1</figcaption></figure><table><thead><tr><th>发送端CRC计算规则</th><th>示例</th></tr></thead><tbody><tr><td>构造被除数（待发信息后面添加生成多项式最高次数个0）</td><td>待发信息：101001，最高次数为3，则被除数为：101001000</td></tr><tr><td>构造除数（生成多项式系数构成的比特串）</td><td>G(X)=x<sup>3</sup>+x<sup>2</sup>+1，其系数构成的比特串位：1101</td></tr><tr><td>进行除法运算（异或运算）</td><td>异或运算：同为0，异为1</td></tr><tr><td>检查余数（余数位数==生成多项式的最高次数，不足则在余数前补0）</td><td>101001000/1101= 110101···1 ，余数为1，与生成多项式最高次不等，补0，则为001</td></tr></tbody></table><h2 id="多路访问控制协议-mac协议" tabindex="-1"><a class="header-anchor" href="#多路访问控制协议-mac协议"><span>多路访问控制协议（MAC协议）</span></a></h2><p>MAC协议，全称Multiple Access Control Protocol，又叫多路访问控制协议。其根本任务，<strong><mark>解决信道共享问题</mark></strong>。</p><p>数据链路层的信道主要有：点对点信道、广播信道（需借助MAC协议来完成帧的传输）。</p><p>MAC协议有3类：</p><ul><li>信道划分</li><li>随机访问</li><li><s>受控接入</s> （过时）</li></ul><h3 id="信道划分mac协议" tabindex="-1"><a class="header-anchor" href="#信道划分mac协议"><span>信道划分MAC协议</span></a></h3><p>信道划分MAC协议用的是<strong>多路复用技术</strong>，主要包括<strong>频分</strong>多路复用、<strong>时分</strong>多路复用、<strong>波分</strong>多路复用、<strong>码分</strong>多路复用。</p><blockquote><p>**多路复用技术：**把多个低速信道组合成一个高速信道的技术，提高数据链路的利用率。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz2jpppgtj621i0hcdlp02.jpg" alt="image-20210830200509237" tabindex="0" loading="lazy"><figcaption>image-20210830200509237</figcaption></figure></blockquote><ul><li><p><strong>频</strong>分多路复用FDM:</p></li><li><p><strong>时</strong>分多路复用TDM:</p></li><li><p><strong>波</strong>分多路复用WDM:光纤用的就是这个技术。</p></li><li><p><strong>码</strong>分多路复用CDM:</p></li></ul><h3 id="随机访问mac协议-100°" tabindex="-1"><a class="header-anchor" href="#随机访问mac协议-100°"><span>随机访问MAC协议 <mark>100°</mark></span></a></h3><h4 id="aloha协议" tabindex="-1"><a class="header-anchor" href="#aloha协议"><span>ALOHA协议 **</span></a></h4><ul><li>纯ALOHA协议</li><li><a href="https://baike.baidu.com/item/%E6%97%B6%E9%9A%99ALOHA/9189645?fr=aladdin" target="_blank" rel="noopener noreferrer">时隙ALOHA协议</a></li></ul><p><strong>纯ALOHA协议</strong>：<strong>任何站点有数据发送时，都可以直接发送数据</strong>。发送站发出数据后<strong>侦听一段时间</strong>，在侦听期间若<strong>收到接收站发来的应答信号，则说明发送成功</strong>，反之失败，则<strong>等待一个随机时间</strong>再进行重发，再冲突再等，直到发送成功为止。</p><p><strong>时隙ALOHA</strong></p><p>了解下它的基本思想：将时间划分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发送冲突，则必须等到下一个时间片开始时刻再发送。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz2rbpwdej61c40cqwhm02.jpg" alt="image-20210830201230597" tabindex="0" loading="lazy"><figcaption>image-20210830201230597</figcaption></figure><h4 id="载波监听多址接入协议-csma协议-100°" tabindex="-1"><a class="header-anchor" href="#载波监听多址接入协议-csma协议-100°"><span>载波监听多址接入协议（CSMA协议） <mark>100°</mark> *</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz2upjasbj61aa0boace02.jpg" alt="image-20210830201543020" tabindex="0" loading="lazy"><figcaption>image-20210830201543020</figcaption></figure><p>分类：</p><table><thead><tr><th></th><th>非坚持CSMA <mark>100°</mark></th><th>1-坚持CSMA <mark>100°</mark></th><th>P-坚持CSMA</th></tr></thead><tbody><tr><td><strong>数据发送前</strong></td><td>先侦听信道</td><td>先侦听信道</td><td>先侦听信道</td></tr><tr><td><strong>信道空闲时</strong></td><td>立即发送数据</td><td>立即发送数据</td><td>P概率：在最近时隙发送，<br>1-P概率：延迟到下一个时隙发</td></tr><tr><td><strong>信道忙时</strong></td><td><strong>等一个随机时间后重发</strong></td><td>继续侦听直至空闲</td><td>等下一个时隙并重新发送</td></tr><tr><td><strong>有冲突时</strong></td><td><strong>等一个随机时间后重发</strong></td><td></td><td>等一个随机时间后重发</td></tr></tbody></table><p><strong>注意</strong>：他们实现原理必考，注意理解掌握。</p><h4 id="带冲突检测的载波监听多址接入协议-csma-cd协议-100°" tabindex="-1"><a class="header-anchor" href="#带冲突检测的载波监听多址接入协议-csma-cd协议-100°"><span><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=31" target="_blank" rel="noopener noreferrer">带冲突检测的载波监听多址接入协议（CSMA/CD协议）</a> <mark>100°</mark> **</span></a></h4><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gseg56utn6j31ws0u0tjx.jpg" alt="image-20210712195103101" tabindex="0" loading="lazy"><figcaption>image-20210712195103101</figcaption></figure><p><strong><mark>工作原理</mark></strong>：通信站发送数据时，若检测到冲突，则立即停止发送数据，并发出一个<strong>冲突强化信号</strong>，用于告知其他通信站此时信道忙碌。</p><p><strong><mark>工作状态</mark></strong>：</p><ol><li><strong>传输</strong>状态：当信道被占用时，其他通信站禁止使用。</li><li><strong>竞争</strong>状态：所有通信站都有权尝试获取信道使用权。</li><li><strong>空闲</strong>状态：没有通信站使用信道。</li></ol><p><strong>使用CSMA/CD协议实现多路访问控制时，通过共享通信信道的两个通信站之间相距的<mark>最远距离D</mark>、<mark>信号传播速度v</mark>、<mark>数据帧长度L</mark>、<mark>信道信息传输速率R</mark>需满足以下约束</strong>：<mark><strong>传输时延≥2倍的传播时延</strong></mark>，因此可得结论：CSMA/CD存在冲突的主要原因是因为<strong>信号的传播时延</strong>。<br> $$<br> \\frac{L_m}{R} ≥ \\frac{2D_m} {v}<br> $$<br> 【说明】L<sub>m</sub> 数据帧最小长度； R 信息传输速率； D<sub>m</sub> 两通信站之间的最远距离 ；v​ 信号传播速度</p><p>载波监听多址接入/碰撞监测 即 CSMA/CD 。</p><p><strong>CSMA/CD 帧发送流程</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gsegh8hj45j31ky0u0k77.jpg" alt="image-20210712204958891" tabindex="0" loading="lazy"><figcaption>image-20210712204958891</figcaption></figure><p><strong>CSMA/CD 帧接收流程</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gsegie7umej31ey0u0qh1.jpg" alt="image-20210712205106864" tabindex="0" loading="lazy"><figcaption>image-20210712205106864</figcaption></figure><h3 id="受控接入mac协议" tabindex="-1"><a class="header-anchor" href="#受控接入mac协议"><span>受控接入MAC协议</span></a></h3><p>用户不可随意接入信道，必须服从控制。受控接入MAC分：集中式控制、分散式控制。</p><h2 id="局域网-100°" tabindex="-1"><a class="header-anchor" href="#局域网-100°"><span>局域网 <mark>100°</mark> *</span></a></h2><h3 id="arp协议-100°" tabindex="-1"><a class="header-anchor" href="#arp协议-100°"><span>ARP协议 <mark>100°</mark></span></a></h3><p>（一般考简答）</p><p>地址解析协议，将IP地址解析为对应的MAC地址。</p><p><strong>作用</strong>：根据本网目的主机或默认网关的IP地址获取其MAC地址。</p><p><strong>基本思想：<strong>每台主机都设有</strong>专用内存区</strong>，用于存放一张<strong>ARP表</strong>，该表存储了该主机与所在局域网内其他主机和路由器的<strong>IP地址与MAC地址的映射关系</strong>，ARP表更新频繁。ARP是通过<strong>广播ARP</strong>来询问<strong>目的IP地址对应的MAC地址</strong>。</p><h3 id="虚拟局域网-vlan" tabindex="-1"><a class="header-anchor" href="#虚拟局域网-vlan"><span>虚拟局域网（VLAN）</span></a></h3><p><strong>虚拟局域网</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1guhm338vpqj61q00u0gu402.jpg" alt="image-20210915210119274" tabindex="0" loading="lazy"><figcaption>image-20210915210119274</figcaption></figure><p>划分虚拟局域网有3种方式： <mark>100°</mark></p><ol><li>基于<strong>交换机端口</strong></li><li>基于<strong>MAC地址</strong></li><li>基于<strong>上层协议类型</strong>或<strong>地址</strong>划分</li></ol><h3 id="冲突域、广播域" tabindex="-1"><a class="header-anchor" href="#冲突域、广播域"><span>冲突域、广播域</span></a></h3><p><strong>冲突域：<strong>冲突域是指在</strong>一个局域网内</strong>，如果<strong>任意两个结点同时向物理介质中发送信号</strong>，这两路信号一定会在物理介质中相互<strong>叠加或干扰</strong>，从而导致数据<strong>发送的失败</strong>，则这两个结点位于同一个冲突域。</p><p><strong>广播域：<strong>广播域是指任一结点如果发送</strong>链路层广播帧</strong>（即目的 MAC 地址为 FF-FF-FF-FF-FF-FF）的话， 接收该广播帧的所有结点与发送结点同属于一个广播域。</p><h3 id="交换机" tabindex="-1"><a class="header-anchor" href="#交换机"><span>交换机</span></a></h3><p><strong>基本概念：</strong></p><p><strong>工作原理</strong> <mark>100°</mark></p><p>当一帧到达时，交换机首先<strong>决策</strong>将该帧丢弃还是转发，如果是转发，则需要进一步决策将该帧转发到哪个端口，<strong>决策依据</strong>是以<strong>帧的目的MAC地址</strong>为主键，查询交换表，<strong>若表中有帧的目的MAC地址对应的交换表项</strong>，且端口与接收该帧的端口相同，则丢弃该帧，否则向指定端口转发该帧。<strong>若交换表中没有帧的目的MAC地址对应的交换表项</strong>，则开始泛洪。</p><p><strong>工作方式</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz3t1z7ksj618y0pk0zj02.jpg" alt="image-20210830204845143" tabindex="0" loading="lazy"><figcaption>image-20210830204845143</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz3tbptghj618q0fujur02.jpg" alt="image-20210830204901485" tabindex="0" loading="lazy"><figcaption>image-20210830204901485</figcaption></figure><h2 id="点对点链路协议" tabindex="-1"><a class="header-anchor" href="#点对点链路协议"><span>点对点链路协议</span></a></h2><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gvi62vpvjfj610a0oyjtd02.jpg" alt="点对点链路协议" tabindex="0" loading="lazy"><figcaption>点对点链路协议</figcaption></figure><h3 id="ppp协议-100°" tabindex="-1"><a class="header-anchor" href="#ppp协议-100°"><span><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=28" target="_blank" rel="noopener noreferrer">PPP协议</a> <mark>100°</mark> **</span></a></h3><p>PPP是使用最多的点对点链路协议，其<strong>功能</strong>有三类：</p><ol><li>成帧</li><li>链路控制协</li><li>网络控制协议</li></ol><p>PPP数据帧结构：</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cgzcvqj30vc0eyn0d.jpg" alt="帧结构" tabindex="0" loading="lazy"><figcaption>帧结构</figcaption></figure><blockquote><p><strong>PPP的字节填充技术</strong></p></blockquote><p>控制转移字节**“01111101”**用来解决信息中的01111110 与标志字段01111110重复的问题。</p><blockquote><p>**PPP的透明传输 **</p></blockquote><p>首先，弄懂什么是透明传输：通过处理数据比特组合中恰巧与控制信息一致的比特串，以保证传输是透明的。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cjtcmmj31uc0e0dkh.jpg" alt="透明传输" tabindex="0" loading="lazy"><figcaption>透明传输</figcaption></figure><p>PPP实现透明传输是通过<strong>字节填充</strong>实现。在帧的首尾分别添加<strong>0111110</strong>，PPP会对边界内的内容进行scan，当内容里存在0111110​​时，在该字节**<u>前</u><strong>面添加<mark>01111111</mark>，以标识该字节为数据的比特串而非控制信息的比特串。如：001</strong>0111110**→001<mark>01111111</mark><strong>0111110</strong></p><h3 id="hdlc协议-100°" tabindex="-1"><a class="header-anchor" href="#hdlc协议-100°"><span>HDLC协议 <mark>100°</mark></span></a></h3><p>HDLC协议是面向<strong>位</strong>的协议，既适用于点对点，也适用于点对多点的链路。</p><p>HDLC有3种类型的帧：</p><ol><li>信息帧</li><li>管理帧</li><li>无序号帧</li></ol><p>HDLC数据帧结构：</p><table><thead><tr><th>标志位</th><th>地址位</th><th>控制位</th><th>数据</th><th>校验和</th><th>标志位</th></tr></thead><tbody><tr><td>01111110</td><td></td><td></td><td></td><td></td><td>01111110</td></tr></tbody></table><p><strong>HDLC的透明传输</strong></p><p>为避免数据中的比特串与控制信息的比特串相同，HDLC采用**<mark>位填充</mark>**方式区分HDLC帧的边界，发送端会对边界内的内容进行scan，<strong>只要发现5个连续的1（11111），就在第5个1后面插入一个0</strong>，如：0111110 → 发现5个连续的1 → 011111<mark>0</mark>10。以此区分数据比特串与控制信息比特串。</p>',134)]))}const l=g(a,[["render",r],["__file","2数据链路层.html.vue"]]),d=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/2%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.html","title":"数据链路层","lang":"zh-CN","frontmatter":{"title":"数据链路层","order":3,"icon":"file","category":["网络原理","理论基础"],"description":"数据链路层 数据链路层基本服务 数据链路层基本服务数据链路层基本服务 数据链路层要解决的问题：分组在一个网络（或一段链路）上传输的问题。 image-20210619163057241image-20210619163057241 帧，是链路上的数据单元。数据链路层关注3个重点问题：封装成帧，差错检测，可靠传输。 链路层提供以下服务（4个）： 组帧。将...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/yibu_zzn/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/2%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.html"}],["meta",{"property":"og:site_name","content":"郑振宁"}],["meta",{"property":"og:title","content":"数据链路层"}],["meta",{"property":"og:description","content":"数据链路层 数据链路层基本服务 数据链路层基本服务数据链路层基本服务 数据链路层要解决的问题：分组在一个网络（或一段链路）上传输的问题。 image-20210619163057241image-20210619163057241 帧，是链路上的数据单元。数据链路层关注3个重点问题：封装成帧，差错检测，可靠传输。 链路层提供以下服务（4个）： 组帧。将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gvi5r4frp0j613x0u0gob02.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-16T02:59:37.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-16T02:59:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据链路层\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gvi5r4frp0j613x0u0gob02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grnnx8snwxj31re0u0dlw.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cm9guyj312g0ca0uj.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cbzcmfj30ic0dkdg6.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgwtgjr2hj30ry05fjsj.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgx59bjx1j30ne0g8aeu.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgx5wr353j30nk0gitc1.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grgxdjqo22j31bj0u0k5i.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz2jpppgtj621i0hcdlp02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz2rbpwdej61c40cqwhm02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz2upjasbj61aa0boace02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gseg56utn6j31ws0u0tjx.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gsegh8hj45j31ky0u0k77.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gsegie7umej31ey0u0qh1.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1guhm338vpqj61q00u0gu402.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz3t1z7ksj618y0pk0zj02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gtz3tbptghj618q0fujur02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gvi62vpvjfj610a0oyjtd02.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cgzcvqj30vc0eyn0d.jpg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008eGmZEgy1gpf3cjtcmmj31uc0e0dkh.jpg\\"],\\"dateModified\\":\\"2024-04-16T02:59:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"数据链路层基本服务","slug":"数据链路层基本服务","link":"#数据链路层基本服务","children":[]},{"level":2,"title":"差错控制   100° *","slug":"差错控制-100°","link":"#差错控制-100°","children":[]},{"level":2,"title":"差错编码   100° **","slug":"差错编码-100°","link":"#差错编码-100°","children":[{"level":3,"title":"奇偶校验码","slug":"奇偶校验码","link":"#奇偶校验码","children":[]},{"level":3,"title":"CRC循环冗余码 *","slug":"crc循环冗余码","link":"#crc循环冗余码","children":[]}]},{"level":2,"title":"多路访问控制协议（MAC协议）","slug":"多路访问控制协议-mac协议","link":"#多路访问控制协议-mac协议","children":[{"level":3,"title":"信道划分MAC协议","slug":"信道划分mac协议","link":"#信道划分mac协议","children":[]},{"level":3,"title":"随机访问MAC协议  100°","slug":"随机访问mac协议-100°","link":"#随机访问mac协议-100°","children":[]},{"level":3,"title":"受控接入MAC协议","slug":"受控接入mac协议","link":"#受控接入mac协议","children":[]}]},{"level":2,"title":"局域网 100° *","slug":"局域网-100°","link":"#局域网-100°","children":[{"level":3,"title":"ARP协议 100°","slug":"arp协议-100°","link":"#arp协议-100°","children":[]},{"level":3,"title":"虚拟局域网（VLAN）","slug":"虚拟局域网-vlan","link":"#虚拟局域网-vlan","children":[]},{"level":3,"title":"冲突域、广播域","slug":"冲突域、广播域","link":"#冲突域、广播域","children":[]},{"level":3,"title":"交换机","slug":"交换机","link":"#交换机","children":[]}]},{"level":2,"title":"点对点链路协议","slug":"点对点链路协议","link":"#点对点链路协议","children":[{"level":3,"title":"PPP协议 100°  **","slug":"ppp协议-100°","link":"#ppp协议-100°","children":[]},{"level":3,"title":"HDLC协议 100°","slug":"hdlc协议-100°","link":"#hdlc协议-100°","children":[]}]}],"git":{"createdTime":1712818432000,"updatedTime":1713236377000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":3}]},"readingTime":{"minutes":10.26,"words":3079},"filePathRelative":"网络原理/2数据链路层.md","localizedDate":"2024年4月11日","excerpt":"\\n<h2>数据链路层基本服务</h2>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1gvi5r4frp0j613x0u0gob02.jpg\\" alt=\\"数据链路层基本服务\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>数据链路层基本服务</figcaption></figure>\\n<p>数据链路层要解决的问题：分组在一个网络（或一段链路）上传输的问题。</p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/008i3skNgy1grnnx8snwxj31re0u0dlw.jpg\\" alt=\\"image-20210619163057241\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20210619163057241</figcaption></figure>","autoDesc":true}');export{l as comp,d as data};

import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as s}from"./app-BSD7mm_u.js";const g={};function t(l,n){return s(),e("div",null,n[0]||(n[0]=[a(`<h1 id="向量处理机" tabindex="-1"><a class="header-anchor" href="#向量处理机"><span>向量处理机</span></a></h1><h1 id="真题" tabindex="-1"><a class="header-anchor" href="#真题"><span>真题</span></a></h1><h2 id="简答题·全" tabindex="-1"><a class="header-anchor" href="#简答题·全"><span>简答题·全</span></a></h2><p>简述 CRAY-1 向量处理机 $V_i$ 冲突和功能部件冲突的概念 <strong>2204</strong></p><p>简述阵列处理机与流水处理机相比的特点、区别 <strong>1410</strong> <strong>2010</strong> x2</p><p>简述 SIMD 系统互连网络的设计目标 <strong>1304</strong> <strong>1604</strong></p><p>简述<strong>多级立方体网络</strong>对各个<strong>交换开关的控制方式</strong> <strong>2110</strong></p><p>简述实现全排列网络的两种方法 <strong>2008</strong></p><p>简述脉动阵列结构的特点 <strong>1504</strong> <strong>1910</strong> **</p><h2 id="应用题·全" tabindex="-1"><a class="header-anchor" href="#应用题·全"><span>应用题·全</span></a></h2><h3 id="向量链接技术" tabindex="-1"><a class="header-anchor" href="#向量链接技术"><span>向量链接技术 ** *</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155544932.png" alt="image-20230226155544932" tabindex="0" loading="lazy"><figcaption>image-20230226155544932</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202232431.png" alt="image-20230223202232431" tabindex="0" loading="lazy"><figcaption>image-20230223202232431</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223838546.png" alt="image-20230414223838546" tabindex="0" loading="lazy"><figcaption>image-20230414223838546</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9807.jpeg" alt="IMG_9807" tabindex="0" loading="lazy"><figcaption>IMG_9807</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9808.jpeg" alt="IMG_9808" tabindex="0" loading="lazy"><figcaption>IMG_9808</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_98091.jpeg" alt="IMG_98091" tabindex="0" loading="lazy"><figcaption>IMG_98091</figcaption></figure><h3 id="蝶式交换和omega网络" tabindex="-1"><a class="header-anchor" href="#蝶式交换和omega网络"><span>蝶式交换和Omega网络 ** **</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202012622.png" alt="image-20230223202012622" tabindex="0" loading="lazy"><figcaption>image-20230223202012622</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230415221546578.png" alt="image-20230415221546578" tabindex="0" loading="lazy"><figcaption>image-20230415221546578</figcaption></figure><h3 id="pm2i网络" tabindex="-1"><a class="header-anchor" href="#pm2i网络"><span>PM2I网络</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202130586.png" alt="image-20230223202130586" tabindex="0" loading="lazy"><figcaption>image-20230223202130586</figcaption></figure><h3 id="多级立方体网络-cube" tabindex="-1"><a class="header-anchor" href="#多级立方体网络-cube"><span>多级立方体网络（Cube）</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226160310743.png" alt="image-20230226160310743" tabindex="0" loading="lazy"><figcaption>image-20230226160310743</figcaption></figure><p>答：如果是 <code>STARAN</code> 网络，无法实现上述 5 对同时进行传送，因为该网络采用的是级控制，同一级只能是一种开关状态。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226160353302.png" alt="image-20230226160353302" tabindex="0" loading="lazy"><figcaption>image-20230226160353302</figcaption></figure><h3 id="共享主存构形的阵列处理机中并行存储器的无冲突访问" tabindex="-1"><a class="header-anchor" href="#共享主存构形的阵列处理机中并行存储器的无冲突访问"><span>共享主存构形的阵列处理机中并行存储器的无冲突访问 **</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230402155528266.png" alt="image-20230402155528266" tabindex="0" loading="lazy"><figcaption>image-20230402155528266</figcaption></figure><p>存储分体个数 K ≥ 处理单元数 N</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223201803931.png" alt="image-20230223201803931" tabindex="0" loading="lazy"><figcaption>image-20230223201803931</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223018286.png" alt="image-20230414223018286" tabindex="0" loading="lazy"><figcaption>image-20230414223018286</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223213001.png" alt="image-20230414223213001" tabindex="0" loading="lazy"><figcaption>image-20230414223213001</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223227965.png" alt="image-20230414223227965" tabindex="0" loading="lazy"><figcaption>image-20230414223227965</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202037325.png" alt="image-20230223202037325" tabindex="0" loading="lazy"><figcaption>image-20230223202037325</figcaption></figure><h1 id="向量处理机-1" tabindex="-1"><a class="header-anchor" href="#向量处理机-1"><span>向量处理机</span></a></h1><p>具有向量数据表示和向量指令系统的处理机，分<strong>向量流水处理机</strong>和<strong>阵列处理机</strong>。其中向量流水处理机是以<strong>时间重叠</strong>途径开发，阵列处理机是以<strong>资源重复</strong>途径开发。<strong>^</strong></p><blockquote><p>关于向量处理机你要知道：</p><ol><li>是用于解决数值计算问题的高性能计算机</li><li>属于大型或巨型机，但也可以通过<strong>微机+向量协处理机</strong>组成</li><li>向一般采用流水线结构，并以多条流水线并行的方式工作</li><li>只有把待解决的问题转化为向量运算，才可发挥向量机的效率</li></ol></blockquote><h1 id="应试要求" tabindex="-1"><a class="header-anchor" href="#应试要求"><span>应试要求</span></a></h1><blockquote><p>要求：理解什么是向量的流水处理，通过向量指令的<strong>并行和链接</strong>提高性能，阵列处理机的工作原理和结构，了解流水处理机与阵列处理机的差异；理解阵列处理机对<strong>并行算法</strong>、<strong>存储单元分配</strong>、<strong>互连网络</strong>的要求；熟练掌握基本<strong>单级互连网络的互连函数表示</strong>；理解<strong>循环互连网络的实现</strong>；熟练掌握<strong>多级网络、全排列网络的画法</strong>；理解共享主存构形的阵列处理机解决并行存储器无冲突访问的办法；理解脉动阵列流水处理机的原理和通用结构。</p><p>本章的重点是：向量流水处理机中向量指令间的并行、链接，阵列处理机互连网络、互连函数、至级互连网络。难点是：向量处理机的向量指令间的并行、 链接，完成全部指令的时钟拍数计算，阵列处理机的并行算法和多级互连网络。</p></blockquote><h1 id="向量流水处理机" tabindex="-1"><a class="header-anchor" href="#向量流水处理机"><span>向量流水处理机</span></a></h1><h2 id="向量的处理方式" tabindex="-1"><a class="header-anchor" href="#向量的处理方式"><span>向量的处理方式</span></a></h2><p>结论先行，向量横向处理是向量的处理方式，但不是向量的流水处理方式；而向量<strong>纵向处理</strong>和<strong>分组纵横处理</strong>既是向量的处理方式，也是向量的流水处理方式。</p><ul><li>横向处理，计算时，按行从左至右横向进行。</li><li>纵向处理，计算时，按列从上往下纵向进行</li><li>纵横处理，计算时，行列结合同时进行。</li></ul><blockquote><p>【例】</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n;i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">	y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i]);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>横向处理上述代码：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>计算第1个分量：temp[1]=b[1]+c[1]; y[1]=a[1]*temp[1];</span></span>
<span class="line"><span>计算第2个分量：temp[2]=b[2]+c[2]; y[2]=a[2]*temp[2];</span></span>
<span class="line"><span>··· ···</span></span>
<span class="line"><span>计算第n个分量：temp[n]=b[n]+c[n]; y[n]=a[n]*temp[n];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>横向处理存在2个问题：</p><ol><li>计算每一个分量时，都会发送写读数据相关。</li><li>若采用多功能流水线，会发送频繁的流水线切换</li></ol><p><strong>纵向处理上述代码：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>temp[1]=b[1]+c[1]</span></span>
<span class="line"><span>temp[2]=b[2]+c[2]</span></span>
<span class="line"><span>··· ···</span></span>
<span class="line"><span>temp[n]=b[n]+c[n]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>y[1]=a[1]*temp[1]</span></span>
<span class="line"><span>y[2]=a[2]*temp[2]</span></span>
<span class="line"><span>··· ···</span></span>
<span class="line"><span>y[n]=a[n]*temp[n]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>纵向处理时，只会用到2条向量指令：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>VADD b,c,temp</span></span>
<span class="line"><span>VMUL a,temp,y</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>每条向量指令仅做单一相同的运算，两条向量指令之间仅有1次功能切换，适用于向量处理机。<strong>采用链接技术，可以使数据相关不影响流水线的进行</strong>。但<strong>纵向处理对存储器的信息流量要求较高</strong>，因为向量指令的源向量和目标向量都是放在存储器中，运算的中间结果也需送回到存储器中进行保存。</p><p><strong>纵横处理上述代码</strong></p><p>按如下方式分组：(1,n)(n+1,2n)(2n+1,3n)···(kn+1,kn)</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>第1组：</span></span>
<span class="line"><span>		temp[1,n]=b[1,n]+c[1,n]</span></span>
<span class="line"><span>		y[1,n]=a[1,n]*temp[1,n]</span></span>
<span class="line"><span>第2组：</span></span>
<span class="line"><span>		tem[n+1,2n]=b[n+1,2n]+c[n+1,2n]</span></span>
<span class="line"><span>		y[n+1,2n]=a[n+1,2n]*temp[1,2n]</span></span>
<span class="line"><span>··· ···</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>纵横方式采取的是组内纵向，组间横向，可以减少访存次数，提高处理速度。</p></blockquote><h2 id="通过并行、链接提高性能" tabindex="-1"><a class="header-anchor" href="#通过并行、链接提高性能"><span>通过并行、链接提高性能 *</span></a></h2><h3 id="向量指令" tabindex="-1"><a class="header-anchor" href="#向量指令"><span>向量指令</span></a></h3><p>以 $CRAY-1$ 向量处理机为例，其有4类指令（2种指令格式）：</p><ul><li>向量与向量操作： $V_i \\quad ← \\quad V_j \\quad OP \\quad V_k$</li><li>向量与标量操作：$V_i \\quad ← \\quad S_j \\quad OP \\quad V_k$</li><li>向量取：$V_i \\quad ← \\quad 存储器 $</li><li>向量存：$存储器 \\quad ← \\quad V_i $</li></ul><blockquote><p>【图】向量运算中的数据相关和功能部件冲突 * ^</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225122115550.png" alt="image-20230225122115550" tabindex="0" loading="lazy"><figcaption>image-20230225122115550</figcaption></figure><p><strong>$V_i$ 冲突</strong>：并行工作的各向量指令的<strong>源向量</strong>或<strong>结果向量</strong>同时使用了<strong>相同的 $V_i$</strong> ，如图(b)和图(d)。</p><p><strong>功能部件冲突</strong>：并行工作的各向量指令同时使用了<strong>相同的功能部件</strong>，如图(c)。</p></blockquote><h3 id="链接技术" tabindex="-1"><a class="header-anchor" href="#链接技术"><span>链接技术</span></a></h3><p>当<strong>前一条指令的结果寄存器</strong>可以作为<strong>后续指令的操作数寄存器</strong>时，多条<strong>有数据相关的向量指令并行执行</strong>，这种技术称为<strong>两条流水线的链接技术</strong>。这种方式能够保证前面功能部件的结果元素一经产生，就可以立即被后面的功能部件使用，而无需等结果向量全部产生后再使用。</p><p>向量链接技术的应用是有一些基本要求的，以 CRAY-1 为例，其有一个显著的特点是只要不出现<strong>功能部件使用冲突</strong>和<strong>源向量寄存器使用冲突</strong>，就能够通过链接技术使有数据相关的指令并行执行。</p><blockquote><p>【例】可链接执行的场景 *</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225122841885.png" alt="image-20230225122841885" tabindex="0" loading="lazy"><figcaption>image-20230225122841885</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225123403341.png" alt="image-20230225123403341" tabindex="0" loading="lazy"><figcaption>image-20230225123403341</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225123428964.png" alt="image-20230225123428964" tabindex="0" loading="lazy"><figcaption>image-20230225123428964</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225123654146.png" alt="image-20230225123654146" tabindex="0" loading="lazy"><figcaption>image-20230225123654146</figcaption></figure></blockquote><p><strong>向量链接的要求</strong> * **</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326221635522.png" alt="image-20230326221635522" tabindex="0" loading="lazy"><figcaption>image-20230326221635522</figcaption></figure><h1 id="阵列处理机-simd" tabindex="-1"><a class="header-anchor" href="#阵列处理机-simd"><span>阵列处理机（SIMD）</span></a></h1><h2 id="_2-种构形" tabindex="-1"><a class="header-anchor" href="#_2-种构形"><span>2 种构形</span></a></h2><ul><li><strong>分布式存储器</strong>的阵列处理机构形</li><li><strong>集中式共享存储器</strong>的阵列处理机构形</li></ul><blockquote><p>【图】分布式存储器的阵列处理机构形</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225130823211.png" alt="image-20230225130823211" tabindex="0" loading="lazy"><figcaption>image-20230225130823211</figcaption></figure></blockquote><blockquote><p>【图】集中式共享存储器的阵列处理机构形</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225131007514.png" alt="image-20230225131007514" tabindex="0" loading="lazy"><figcaption>image-20230225131007514</figcaption></figure></blockquote><h2 id="阵列处理机的特点" tabindex="-1"><a class="header-anchor" href="#阵列处理机的特点"><span>阵列处理机的特点 ^ *</span></a></h2><blockquote><p>详细特点参见《计算机系统结构（2012版）》/李学干/p210</p></blockquote><ol><li>基于<strong>科学计算</strong>的诉求发展起来的，与<strong>并行算法</strong>紧密联系。</li><li>利用<strong>资源重复</strong>和<strong>并行性中的同时性</strong>来提高自身的效率。</li><li>处理单元之间是基于<strong>简单规整的互连网络</strong>构建起来的（设计重点）</li></ol><h2 id="与流水处理机的区别" tabindex="-1"><a class="header-anchor" href="#与流水处理机的区别"><span>与流水处理机的区别 ^ *</span></a></h2><ul><li>阵列处理机利用的是<strong>资源重复</strong>和<strong>并行性中的同时性</strong>，流水处理机利用的是<strong>时间重叠</strong>和<strong>并行性中的并发性</strong>；</li><li>阵列处理机使用简单规整的互连网络来确定PE间的连接，流水处理机的功能部件比较固定。</li></ul><h2 id="illiac-iv-的处理单元阵列构形" tabindex="-1"><a class="header-anchor" href="#illiac-iv-的处理单元阵列构形"><span>ILLIAC IV 的处理单元阵列构形 **</span></a></h2><blockquote><p>【图】ILLIAC IV 阵列机 （属于<strong>分布式存储器构形</strong>）</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225132142072.png" alt="image-20230225132142072" tabindex="0" loading="lazy"><figcaption>image-20230225132142072</figcaption></figure></blockquote><h3 id="illiac-iv-矩阵加" tabindex="-1"><a class="header-anchor" href="#illiac-iv-矩阵加"><span>ILLIAC IV 矩阵加 **</span></a></h3><h3 id="illiac-iv-矩阵乘" tabindex="-1"><a class="header-anchor" href="#illiac-iv-矩阵乘"><span>ILLIAC IV 矩阵乘 **</span></a></h3><h3 id="illiac-iv-累加和" tabindex="-1"><a class="header-anchor" href="#illiac-iv-累加和"><span>ILLIAC IV 累加和 **</span></a></h3><h1 id="simd-互连网络" tabindex="-1"><a class="header-anchor" href="#simd-互连网络"><span>SIMD 互连网络 *</span></a></h1><p><strong>互连网络</strong>是一种由<strong>开关元件</strong>按照一定的<strong>拓扑结构</strong>和<strong>控制方式</strong>构成的网络，用来实现计算机系统中<strong>节点之间的相互连接</strong>。其中，节点可以是处理器、存储模块或其他设备。</p><ul><li>互连网络已成为并行处理系统的核心组成部分</li><li>互连网络对整个计算机系统的性能价格比有着决定性的影响</li></ul><blockquote><p>SIMD 互连网络需要弄清以下4点：</p><ol><li>概念</li><li>设计目标 *</li><li>抉择问题</li><li>互连网络</li></ol></blockquote><blockquote><p>【图】具有本地存储器、私有高速缓存、共享存储器和共享外围设备的一般处理机系统的互连结构</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226122555095.png" alt="image-20230226122555095" tabindex="0" loading="lazy"><figcaption>image-20230226122555095</figcaption></figure></blockquote><h2 id="设计目标" tabindex="-1"><a class="header-anchor" href="#设计目标"><span>设计目标 * ^</span></a></h2><p>SIMD 系统的互连网络的<strong>设计目标</strong>：结构不要太复杂，以降低成本；互连要灵活，以满足算法和应用的需要；处理单元间信息交换步数要少，以提高性能；能用规整单一的基本构件组合而成，或经多次通过或经多级连接实现复杂的互连，使模块性好，便于用 $VLSI$ 实现并满足系统的可扩充性。</p><p><strong><u>简记</u></strong> <strong>^</strong></p><ol><li>结构不要太复杂，以降低成本。</li><li>互连要灵活，以满足算法和应用的需要。</li><li>PE间信息交换步数要少，以提高性能。</li><li>模块要规整，便于使用 <code>VLSI</code> 提高系统的可扩充性。</li></ol><h2 id="抉择问题" tabindex="-1"><a class="header-anchor" href="#抉择问题"><span>抉择问题 -</span></a></h2><p>在确定处理单元（PE）之间的互连网络时，需对操作方式、交换方法、控制策略、拓扑结构做出抉择</p><p>对于操作方式，有<strong>同步</strong>、<strong>异步</strong>、<strong>同步与异步组合</strong>3种方式。</p><p>对于交换方法，有<strong>线路交换</strong>、<strong>包交换</strong>和<strong>线路与包交换组合</strong>3种方式。</p><p>对于控制策略，有<strong>集中控制</strong>、<strong>分布控制</strong>2种方式。</p><p>对于拓扑结构，有静态、动态2种方式，静态方面有一维的线性、二维的环型、星型、树型、胖树型、网络型、脉动阵列型、三维的弦环形、立方体型，<strong>由于静态网络的灵活性、适应性都比较差，很少使用，因此知道即可</strong>，动态方面有单级和多级2种。其中，<strong>动态单级网络</strong>只有有限的几种连接，必须经循环多次通过，才能实现任意两个处理单元之间的信息传输。<strong>动态多级网络</strong>是由多个单机网络串联组成，以实现任意两个处理单元间的连接。</p><h2 id="互连种类" tabindex="-1"><a class="header-anchor" href="#互连种类"><span>互连种类 * **</span></a></h2><h3 id="基本的单级互连网络" tabindex="-1"><a class="header-anchor" href="#基本的单级互连网络"><span>基本的单级互连网络</span></a></h3><h4 id="_1、立方体单机网络-cube" tabindex="-1"><a class="header-anchor" href="#_1、立方体单机网络-cube"><span>1、立方体单机网络（Cube）</span></a></h4><p>实现二进制地址编码中第 $k$ 位<strong>互反</strong>的输入端与输出端之间的连接。<br> $$<br> C_k\\left(x_{n-1} x_{n-2} \\cdots x_1 x_0\\right)=x_{n-1} x_{n-2} \\cdots \\overline{x_k} \\cdots x_0<br> $$</p><blockquote><p>【图】Cube 交换函数</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226141954914.png" alt="image-20230226141954914" tabindex="0" loading="lazy"><figcaption>image-20230226141954914</figcaption></figure><p>以 $Cube_0$ 为例，第0位互反的输入端与输出端进行连接：</p><table><thead><tr><th style="text-align:center;">000</th><th style="text-align:center;">001</th><th style="text-align:center;">010</th><th style="text-align:center;">100</th><th style="text-align:center;">101</th><th style="text-align:center;">110</th></tr></thead><tbody><tr><td style="text-align:center;">001</td><td style="text-align:center;">000</td><td style="text-align:center;">011</td><td style="text-align:center;">101</td><td style="text-align:center;">100</td><td style="text-align:center;">111</td></tr><tr><td style="text-align:center;">0连1</td><td style="text-align:center;">1连0</td><td style="text-align:center;">2连3</td><td style="text-align:center;">4连5</td><td style="text-align:center;">5连4</td><td style="text-align:center;">6连7</td></tr></tbody></table><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226142611971.png" alt="image-20230226142611971" tabindex="0" loading="lazy"><figcaption>image-20230226142611971</figcaption></figure><p>从上面坐标你能够直观看出各<strong>PE之间</strong>的互连情况，如 $110$ 与 $001$ 是基于 $Cube_2$ 实现互联的， $110$ 与 $100$ 是基于 $Cube_1$ 互连的。</p></blockquote><h4 id="_2、pm2i-单级网络-pm21" tabindex="-1"><a class="header-anchor" href="#_2、pm2i-单级网络-pm21"><span>2、PM2I 单级网络 （PM21）</span></a></h4><p>$P$ 表示加，$M$ 表示减，2I表示 $2^i$ 。PM2I是一种移数网络，将各输入端都错开一定位置（模N）后连到输出端，其互连函数为：<br> $$<br> \\begin{aligned}<br> &amp; P M 2_{+i}(x)=x+2^i \\bmod N \\<br> &amp; P M 2_{-i}(x)=x-2^i \\bmod N<br> \\end{aligned}<br> $$<br> 其中: $0 \\leq x \\leq N-1,0 \\leq i \\leq n-1, n=\\log _2 N, N$ 为节点数，PM2I有 $2n-1$ 互连函数，其PM2I单机网络的最大距离为「N/2」。</p><blockquote><p>【图】 N = 8 时，有 6 个 PM2I 函数</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226143518915.png" alt="image-20230226143518915" tabindex="0" loading="lazy"><figcaption>image-20230226143518915</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226143528655.png" alt="image-20230226143528655" tabindex="0" loading="lazy"><figcaption>image-20230226143528655</figcaption></figure></blockquote><blockquote><p>【图】 ILLIAC IV 的互连网络</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226143846729.png" alt="image-20230226143846729" tabindex="0" loading="lazy"><figcaption>image-20230226143846729</figcaption></figure></blockquote><h4 id="_3、混洗交换单级网络-shuffle" tabindex="-1"><a class="header-anchor" href="#_3、混洗交换单级网络-shuffle"><span>3、混洗交换单级网络（Shuffle）</span></a></h4><p>简言之：把最高位挪到最低位。<br> $$<br> \\sigma\\left(x_{n-1} x_{n-2} \\cdots x_1 x_0\\right)=x_{n-2} x_{n-3} \\cdots x_1 x_0 x_{n-1}<br> $$<br> 在混洗交换网络中，最远的两个入、出端是全0和全1，它们的连接需要 <strong>n 次交换和 n-1 次混洗（<u>简记：n交n-1洗</u>）</strong>，因此其最大距离为 2n-1。</p><h4 id="_4、蝶形单级网络-butterfly" tabindex="-1"><a class="header-anchor" href="#_4、蝶形单级网络-butterfly"><span>4、蝶形单级网络（Butterfly）</span></a></h4><p>简言之：最高位和最低位互换位置。<br> $$<br> \\beta\\left( \\mathbf{x_{n-1}} x_{n-2} \\cdots x_1 x_0\\right)=x_0 x_{n-2} \\cdots x_1 \\mathbf{x_{n-1}}<br> $$</p><h3 id="基本的多级互连网络" tabindex="-1"><a class="header-anchor" href="#基本的多级互连网络"><span>基本的多级互连网络</span></a></h3><p>SIMD 和 MIMD 都是采用 多级互连网络（Multistage Interconnection Network,简称MIN）。不同的多级互连网络，在所用的交换开关、拓扑结构、控制方式各有不同。</p><p>对于交换开关，有4种：直连、交换、上播、下播</p><blockquote><p>【图】4种交换开关</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226145411377.png" alt="image-20230226145411377" tabindex="0" loading="lazy"><figcaption>image-20230226145411377</figcaption></figure></blockquote><p>对于控制方式，有级控制、单元控制、部分级控制。</p><p>对于拓扑结构，有多级立方体、多级混洗、多级PM2I等。</p><h4 id="_1、多级立方体" tabindex="-1"><a class="header-anchor" href="#_1、多级立方体"><span>1、多级立方体</span></a></h4><p>多级立方体网络包含 <strong>STARAN 网络</strong> 和 <strong>间接二进制n方体网络</strong>。 <strong>^</strong></p><ul><li>二者共同点：都采用<strong>二功能交换开关</strong>。</li><li>二者差异点：在控制方式上，<code>STARAN</code> 采用的是<strong>级控制</strong>和<strong>部分级控制</strong>，<strong>间接二进制n方体</strong>采用的是<strong>单元级控制</strong>。</li></ul><p>多级立方体网络对各个<strong>交换开关的控制方式</strong>：<strong>^</strong></p><ul><li>级控制。同级的所有开关只用一个控制信号控制，且只能处于同种状态。</li><li>单元控制。每个开关都有各自独立的控制信号，可各自处于不同状态。</li><li>部分级控制。第$i$级的所有开关分布用$i+1$个信号控制。</li></ul><blockquote><p>【图】多级立方体网络</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226150438987.png" alt="image-20230226150438987" tabindex="0" loading="lazy"><figcaption>image-20230226150438987</figcaption></figure></blockquote><h4 id="_2、多级混洗交换网络-omega" tabindex="-1"><a class="header-anchor" href="#_2、多级混洗交换网络-omega"><span>2、多级混洗交换网络（Omega）</span></a></h4><blockquote><p>【图】一个 8×8 的 Omega 网络</p><ul><li>每级由4个四功能的2×2开关构成</li><li>级间互联采用<strong>均匀洗牌</strong>方式连接 （最高位挪到最低位）</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226152049003.png" alt="image-20230226152049003" tabindex="0" loading="lazy"><figcaption>image-20230226152049003</figcaption></figure></blockquote><h4 id="_3、多级pm2i网络" tabindex="-1"><a class="header-anchor" href="#_3、多级pm2i网络"><span>3、多级PM2I网络 **</span></a></h4><h4 id="_4、其他网络" tabindex="-1"><a class="header-anchor" href="#_4、其他网络"><span>4、其他网络</span></a></h4><p>其他网络，包括基准网络、多级交叉开关网络、多级蝶式网络详见教材：</p><blockquote><p>《计算机系统结构（2012版）》/李学干/p224-226</p></blockquote><h3 id="全排列网络" tabindex="-1"><a class="header-anchor" href="#全排列网络"><span>全排列网络</span></a></h3><p>有 $N!$ 种映象的互连网络，叫全排列网络；实现<strong>全排列网络</strong>的两种方法：</p><ol><li>① 在<strong>多级互连网络</strong>的<strong>输出端</strong>设置<strong>锁存器</strong>，使<strong>数据</strong>在时间上顺序通行<strong>两次</strong>；</li><li>② 将一个<strong>多级互连网络</strong>和它的<strong>逆网络</strong>串接起来，<strong>合并</strong>掉中间完全<strong>重复</strong>的一级。</li></ol><h1 id="共享主存构形的阵列处理机中并行存储器的无冲突访问-1" tabindex="-1"><a class="header-anchor" href="#共享主存构形的阵列处理机中并行存储器的无冲突访问-1"><span>共享主存构形的阵列处理机中并行存储器的无冲突访问 **</span></a></h1><blockquote><p>【图】第1种情形</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155017117.png" alt="image-20230226155017117" tabindex="0" loading="lazy"><figcaption>image-20230226155017117</figcaption></figure><p>【图】第2种情形</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155038807.png" alt="image-20230226155038807" tabindex="0" loading="lazy"><figcaption>image-20230226155038807</figcaption></figure><p>【图】第3种情形</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155139935.png" alt="image-20230226155139935" tabindex="0" loading="lazy"><figcaption>image-20230226155139935</figcaption></figure></blockquote><h1 id="脉动阵列流水处理机" tabindex="-1"><a class="header-anchor" href="#脉动阵列流水处理机"><span>脉动阵列流水处理机</span></a></h1><blockquote><p>【背景】为要求计算量很大的<strong>信号/图像处理</strong>及科学计算的<strong>特定算法需求</strong>，卡内基-梅隆大学的美籍华人 H.T.Kung 于 1978 年提出**脉动阵列（Systolic Array）**处理机。其中该项设计被应用到 Google TPU 设计中。</p></blockquote><h2 id="脉动阵列结构的原理" tabindex="-1"><a class="header-anchor" href="#脉动阵列结构的原理"><span>脉动阵列结构的原理</span></a></h2><p>脉动阵列结构是由一组处理单元（PE）构成的阵列。每个PE的内部结构相同，一般由一个加法/逻辑运算部件或加法/乘法运算部件再加上若干锁存器构成；阵列内所有PE的数据锁存器受一个时钟控制；运算时，<strong>输入数据流</strong>和<strong>结果数据流</strong>在阵列结构的各个PE间沿各自的方向<strong>同步</strong>向前推进。 就像血液受心脏有节奏地搏动在各条血管中同步向前流动一样，因此被称为”脉动阵列结构“</p><h2 id="脉动阵列结构的特点" tabindex="-1"><a class="header-anchor" href="#脉动阵列结构的特点"><span>脉动阵列结构的特点 ^</span></a></h2><p>脉动阵列结构有如下特点： <strong>^</strong></p><ul><li>结构简单规整、模块化强、可扩充性好，适用于 <code>VLSI</code> 实现。</li><li>PE间数据通信距离短，<strong>数据流和控制流的设计以及同步控制</strong>等均<strong>简单规整</strong>。</li><li>所有PE都能<strong>同时运算</strong>，具有较高的计算并行性，可通过<strong>流水</strong>获得很高的<strong>运算效率和吞吐率</strong>。</li><li><strong>输入数据</strong>能被多个处理单元<strong>重复使用</strong>，大大减轻了阵列与外界的IO通信量，降低对<strong>系统主存</strong>和<strong>IO频宽</strong>的要求。</li><li>与<strong>特定计算任务</strong>和<strong>算法</strong>密切相关，具有某种专用性，这对 <code>VLSI</code> 不利 。</li></ul><blockquote><p><strong>VLSI</strong>：超大规模集成电路（Very Large Scale Integration Circuit，<em>VLSI</em>）</p></blockquote>`,129)]))}const d=i(g,[["render",t],["__file"," 6 向量处理机.html.vue"]]),p=JSON.parse('{"path":"/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%206%20%E5%90%91%E9%87%8F%E5%A4%84%E7%90%86%E6%9C%BA.html","title":"向量处理机","lang":"zh-CN","frontmatter":{"title":"向量处理机","order":6,"icon":"file","category":["系统结构","理论基础"],"description":"向量处理机 真题 简答题·全 简述 CRAY-1 向量处理机 $V_i$ 冲突和功能部件冲突的概念 2204 简述阵列处理机与流水处理机相比的特点、区别 1410 2010 x2 简述 SIMD 系统互连网络的设计目标 1304 1604 简述多级立方体网络对各个交换开关的控制方式 2110 简述实现全排列网络的两种方法 2008 简述脉动阵列结构的特...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/yibu_zzn/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%206%20%E5%90%91%E9%87%8F%E5%A4%84%E7%90%86%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"郑振宁"}],["meta",{"property":"og:title","content":"向量处理机"}],["meta",{"property":"og:description","content":"向量处理机 真题 简答题·全 简述 CRAY-1 向量处理机 $V_i$ 冲突和功能部件冲突的概念 2204 简述阵列处理机与流水处理机相比的特点、区别 1410 2010 x2 简述 SIMD 系统互连网络的设计目标 1304 1604 简述多级立方体网络对各个交换开关的控制方式 2110 简述实现全排列网络的两种方法 2008 简述脉动阵列结构的特..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155544932.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T02:36:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T02:36:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"向量处理机\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155544932.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202232431.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223838546.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9807.jpeg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9808.jpeg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_98091.jpeg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202012622.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230415221546578.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202130586.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226160310743.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226160353302.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230402155528266.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223201803931.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223018286.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223213001.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230414223227965.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223202037325.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225122115550.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225122841885.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225123403341.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225123428964.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225123654146.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326221635522.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225130823211.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225131007514.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230225132142072.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226122555095.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226141954914.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226142611971.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226143518915.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226143528655.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226143846729.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226145411377.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226150438987.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226152049003.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155017117.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155038807.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230226155139935.png\\"],\\"dateModified\\":\\"2024-04-12T02:36:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"简答题·全","slug":"简答题·全","link":"#简答题·全","children":[]},{"level":2,"title":"应用题·全","slug":"应用题·全","link":"#应用题·全","children":[{"level":3,"title":"向量链接技术 ** *","slug":"向量链接技术","link":"#向量链接技术","children":[]},{"level":3,"title":"蝶式交换和Omega网络 ** **","slug":"蝶式交换和omega网络","link":"#蝶式交换和omega网络","children":[]},{"level":3,"title":"PM2I网络","slug":"pm2i网络","link":"#pm2i网络","children":[]},{"level":3,"title":"多级立方体网络（Cube）","slug":"多级立方体网络-cube","link":"#多级立方体网络-cube","children":[]},{"level":3,"title":"共享主存构形的阵列处理机中并行存储器的无冲突访问 **","slug":"共享主存构形的阵列处理机中并行存储器的无冲突访问","link":"#共享主存构形的阵列处理机中并行存储器的无冲突访问","children":[]}]},{"level":2,"title":"向量的处理方式","slug":"向量的处理方式","link":"#向量的处理方式","children":[]},{"level":2,"title":"通过并行、链接提高性能 *","slug":"通过并行、链接提高性能","link":"#通过并行、链接提高性能","children":[{"level":3,"title":"向量指令","slug":"向量指令","link":"#向量指令","children":[]},{"level":3,"title":"链接技术","slug":"链接技术","link":"#链接技术","children":[]}]},{"level":2,"title":"2 种构形","slug":"_2-种构形","link":"#_2-种构形","children":[]},{"level":2,"title":"阵列处理机的特点 ^ *","slug":"阵列处理机的特点","link":"#阵列处理机的特点","children":[]},{"level":2,"title":"与流水处理机的区别 ^ *","slug":"与流水处理机的区别","link":"#与流水处理机的区别","children":[]},{"level":2,"title":"ILLIAC IV 的处理单元阵列构形 **","slug":"illiac-iv-的处理单元阵列构形","link":"#illiac-iv-的处理单元阵列构形","children":[{"level":3,"title":"ILLIAC IV 矩阵加 **","slug":"illiac-iv-矩阵加","link":"#illiac-iv-矩阵加","children":[]},{"level":3,"title":"ILLIAC IV 矩阵乘 **","slug":"illiac-iv-矩阵乘","link":"#illiac-iv-矩阵乘","children":[]},{"level":3,"title":"ILLIAC IV 累加和 **","slug":"illiac-iv-累加和","link":"#illiac-iv-累加和","children":[]}]},{"level":2,"title":"设计目标 * ^","slug":"设计目标","link":"#设计目标","children":[]},{"level":2,"title":"抉择问题 -","slug":"抉择问题","link":"#抉择问题","children":[]},{"level":2,"title":"互连种类 * **","slug":"互连种类","link":"#互连种类","children":[{"level":3,"title":"基本的单级互连网络","slug":"基本的单级互连网络","link":"#基本的单级互连网络","children":[]},{"level":3,"title":"基本的多级互连网络","slug":"基本的多级互连网络","link":"#基本的多级互连网络","children":[]},{"level":3,"title":"全排列网络","slug":"全排列网络","link":"#全排列网络","children":[]}]},{"level":2,"title":"脉动阵列结构的原理","slug":"脉动阵列结构的原理","link":"#脉动阵列结构的原理","children":[]},{"level":2,"title":"脉动阵列结构的特点 ^","slug":"脉动阵列结构的特点","link":"#脉动阵列结构的特点","children":[]}],"git":{"createdTime":1712889399000,"updatedTime":1712889399000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":1}]},"readingTime":{"minutes":14.18,"words":4255},"filePathRelative":"系统结构/ 6 向量处理机.md","localizedDate":"2024年4月12日","excerpt":"\\n<h1>真题</h1>\\n<h2>简答题·全</h2>\\n<p>简述 CRAY-1 向量处理机 $V_i$ 冲突和功能部件冲突的概念 <strong>2204</strong></p>\\n<p>简述阵列处理机与流水处理机相比的特点、区别 <strong>1410</strong> <strong>2010</strong> x2</p>\\n<p>简述 SIMD 系统互连网络的设计目标 <strong>1304</strong> <strong>1604</strong></p>\\n<p>简述<strong>多级立方体网络</strong>对各个<strong>交换开关的控制方式</strong> <strong>2110</strong></p>","autoDesc":true}');export{d as comp,p as data};

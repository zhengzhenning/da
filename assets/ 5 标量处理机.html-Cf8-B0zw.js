import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as g,o as t}from"./app-Cv0Vf9JB.js";const a={};function s(r,n){return t(),i("div",null,n[0]||(n[0]=[g(`<h1 id="标量处理机" tabindex="-1"><a class="header-anchor" href="#标量处理机"><span>标量处理机</span></a></h1><h1 id="真题" tabindex="-1"><a class="header-anchor" href="#真题"><span>真题</span></a></h1><h2 id="简答题" tabindex="-1"><a class="header-anchor" href="#简答题"><span>简答题</span></a></h2><p>【重叠方式篇】</p><p>简述指令重叠的概念及实现重叠解释必须满足的要求 <strong>1510</strong> <strong>1404</strong></p><p>【流水方式篇】</p><p>简述多功能流水线的概念和静动态流水线分类的依据 <strong>2204</strong></p><p>简述 IBM360/91 解决流水控制的途径 <strong>1910</strong> ** （熟读）</p><blockquote><p>源自教材习题5-10：<strong>试总结 IBM360/91 解决流水控制的一般方法、途径和特点</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9805.jpeg" alt="IMG_9805" tabindex="0" loading="lazy"><figcaption>IMG_9805</figcaption></figure></blockquote><p>简述<strong>超流水处理机</strong>提高<strong>指令级并行</strong>的方法和特点 <strong>1204</strong></p><p>简述<strong>超标量处理机</strong>和<strong>超流水处理机</strong>的区别 <strong>2008</strong> （熟读教材原话）</p><p>简述流水线机器全局性相关的概念及处理全局性相关的四种方法 <strong>2104</strong></p><p>简述全局相关处理中，采用猜错法猜错后保证恢复分支点原先的现场的方法 <strong>2110</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326172654580.png" alt="image-20230326172654580" tabindex="0" loading="lazy"><figcaption>image-20230326172654580</figcaption></figure><h2 id="应用题" tabindex="-1"><a class="header-anchor" href="#应用题"><span>应用题</span></a></h2><h3 id="指令重叠执行表达式" tabindex="-1"><a class="header-anchor" href="#指令重叠执行表达式"><span>指令重叠执行表达式 ** **</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219104220037.png" alt="image-20230219104220037" tabindex="0" loading="lazy"><figcaption>image-20230219104220037</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326172947159.png" alt="image-20230326172947159" tabindex="0" loading="lazy"><figcaption>image-20230326172947159</figcaption></figure><h3 id="非线性流水调度" tabindex="-1"><a class="header-anchor" href="#非线性流水调度"><span>非线性流水调度</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219105231031.png" alt="image-20230219105231031" tabindex="0" loading="lazy"><figcaption>image-20230219105231031</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326174229124.png" alt="image-20230326174229124" tabindex="0" loading="lazy"><figcaption>image-20230326174229124</figcaption></figure><h3 id="流水时空图" tabindex="-1"><a class="header-anchor" href="#流水时空图"><span>流水时空图</span></a></h3><ul><li>记住公式即可得分</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219105353523.png" alt="image-20230219105353523" tabindex="0" loading="lazy"><figcaption>image-20230219105353523</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326181052084.png" alt="image-20230326181052084" tabindex="0" loading="lazy"><figcaption>image-20230326181052084</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219105149847.png" alt="image-20230219105149847" tabindex="0" loading="lazy"><figcaption>image-20230219105149847</figcaption></figure><h1 id="标量处理机-1" tabindex="-1"><a class="header-anchor" href="#标量处理机-1"><span>标量处理机</span></a></h1><p>只有标量数据表示和标量指令系统的处理机。</p><h1 id="重叠方式" tabindex="-1"><a class="header-anchor" href="#重叠方式"><span>重叠方式</span></a></h1><blockquote><p>【图】对一条机器指令的解释一般包括3个部分：取指、分析、执行</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219113240787.png" alt="image-20230219113240787" tabindex="0" loading="lazy"><figcaption>image-20230219113240787</figcaption></figure></blockquote><h2 id="指令的重叠解释" tabindex="-1"><a class="header-anchor" href="#指令的重叠解释"><span>指令的重叠解释</span></a></h2><p><strong>指令重叠解释</strong>：在解释<strong>第$k$条指令</strong>操作<strong>完成</strong>之前，就可以开始解释<strong>第$k+1$条指令</strong>。 <strong>^</strong></p><p>实现<strong>指令重叠</strong>需要在<strong>计算机组成</strong>上满足以下几点<strong>要求</strong>：<strong>^</strong></p><ol><li>解决<strong>访主存冲突</strong>问题。</li><li>解决“分析”与“执行”操作的<strong>并行</strong>问题。</li><li>解决“分析”与“执行”操作的<strong>同步</strong>问题。（用“一次重叠”解决） *</li><li>解决<strong>指令相关</strong>问题。</li></ol><p><b style="color:red;">如何解决访主存冲突问题？</b></p><p>结论先行，共有 3 种，但第3种最合适：</p><ul><li>方式一：低位交叉存取</li><li>方式二：设立两个存储器，一个是指令存储器，一个是数据存储器</li><li>方式三：<strong>设立指令缓存寄存器（指缓）</strong>，实现<strong>先行控制技术</strong>。</li></ul><blockquote><p>先行控制技术：其关键技术是<strong>缓存技术</strong>和<strong>预处理技术</strong>。</p><p>缓存技术一般用在<strong>工作速度不固定的两个功能部件之间</strong>。设置缓冲栈的目的：<strong>平滑功能部件之间的工作速度</strong>。</p><p>这种思想在编程领域被广泛应用。</p></blockquote><p><b style="color:red;">如何解决分析和执行的并行问题？</b></p><p>在硬件上，需要有<strong>指令分析部件</strong>和<strong>指令执行部件</strong>的支持。</p><blockquote><p>【例】以<strong>加法器</strong>为例：<strong>分析部件</strong>需要有<strong>地址加法器</strong>用于<strong>地址计算</strong>；<strong>执行部件</strong>需要有<strong>加法器</strong>用于完成<strong>操作数的相加运算</strong>。</p></blockquote><p><b style="color:red;">如何解决分析和执行的同步问题？</b></p><p>在硬件上解决，保证 $执行_k$ 和 $分析_{k+1}$ 同步。</p><blockquote><p>详见：《计算机系统结构（2012版）》/李学干/p170</p></blockquote><p><b style="color:red;">如何解决指令相关问题？</b></p><h2 id="指令的三种执行方式" tabindex="-1"><a class="header-anchor" href="#指令的三种执行方式"><span>指令的三种执行方式</span></a></h2><h3 id="_1、顺序执行方式" tabindex="-1"><a class="header-anchor" href="#_1、顺序执行方式"><span>1、顺序执行方式</span></a></h3><blockquote><p>【图】指令的顺序执行方式</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219113544503.png" alt="image-20230219113544503" tabindex="0" loading="lazy"><figcaption>image-20230219113544503</figcaption></figure><p>执行 $n$ 条指令，需用：</p><figure><img src="https://cdn.mathpix.com/snip/images/MQFQVaL2eOrKZ3vS7tMkKDimzVCO3GRf4dvy1taoXBI.original.fullsize.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><h3 id="_2、一次重叠执行方式" tabindex="-1"><a class="header-anchor" href="#_2、一次重叠执行方式"><span>2、一次重叠执行方式</span></a></h3><p><strong>一次重叠解释</strong>：<strong>指令分析部件</strong>和<strong>指令执行部件</strong>在任何时候都只有相邻两条指令在重叠解释。因此任何时候都只需要保证 $执行_k$ 与 $分析_{k+1}$ 重叠。此种执行方式的<strong>好处</strong>是<strong>节省硬件，简化控制</strong>。 <strong>^</strong></p><blockquote><p>【图】指令的一次重叠执行方式 <strong>待校准</strong></p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219114655826.png" alt="image-20230219114655826" tabindex="0" loading="lazy"><figcaption>image-20230219114655826</figcaption></figure><p>执行 $n$ 条指令，需用：</p><p>$T=(1+2n)·t$</p></blockquote><h3 id="_3、两次重叠执行方式" tabindex="-1"><a class="header-anchor" href="#_3、两次重叠执行方式"><span>3、两次重叠执行方式</span></a></h3><blockquote><p>【图】指令的两次重叠执行方式</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219114848505.png" alt="image-20230219114848505" tabindex="0" loading="lazy"><figcaption>image-20230219114848505</figcaption></figure><p>执行 $n$ 条指令，需用：</p><p>$T=(2+n)·t$</p></blockquote><h2 id="重叠的相关处理" tabindex="-1"><a class="header-anchor" href="#重叠的相关处理"><span>重叠的相关处理</span></a></h2><p>相关有两种，<strong>数相关</strong>和<strong>指令相关</strong>。其中，<strong>数相关</strong>不仅会发生在<strong>主存</strong>空间，还会发生在<strong>通用寄存器</strong>空间。因此，无论发送何种相关，或者使<strong>解释</strong>出错，或者使<strong>重叠</strong>效率显著下降，都必须加以正确处理 。 其中，在执行指令过程中，如果用到<strong>前面指令的执行结果</strong>（如指令、操作数、变址量等），则称为<strong>数据相关</strong>。<strong>^</strong></p><blockquote><p>数相关：第$k$条指令与第$k+1$条指令的数据地址之间有关联。</p></blockquote><h3 id="指令相关" tabindex="-1"><a class="header-anchor" href="#指令相关"><span>指令相关</span></a></h3><blockquote><p>发生指令相关的情景：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>n  : STORE R1,n+1</span></span>
<span class="line"><span>n+1: ···</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述场景中，满足关系：结果地址 n = 指令地址 n+1。当第 n 条指令还没有把执行结果写入主存前，取出的第 n+1 条指令显然是错误的。</p></blockquote><p><strong>解决指令相关</strong>的根本办法：<strong>在程序执行过程中不允许修改指令</strong>。</p><blockquote><p>IBM 370 系列机中，是通过“执行指令”来解决指令相关问题：这种方式使得程序在执行过中中，既可以<strong>修改指令</strong>，又具备<strong>可再入性</strong>。</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219154046329.png" alt="image-20230219154046329" tabindex="0" loading="lazy"><figcaption>image-20230219154046329</figcaption></figure></blockquote><h3 id="主存空间数相关" tabindex="-1"><a class="header-anchor" href="#主存空间数相关"><span>主存空间数相关</span></a></h3><p>主存空间数相关是相邻两条指令之间出现<strong>对主存同一单元要求先写后读</strong>的关联。</p><blockquote><p>发送主存操作数相关的情景：</p><p>待完善。</p></blockquote><p><strong>解决主存操作数相关</strong>的办法：<strong>推后 $分析_{k+1}$ 的读</strong></p><blockquote><p>【图】推后 $分析_{k+1}$ 的读</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219154841787.png" alt="image-20230219154841787" tabindex="0" loading="lazy"><figcaption>image-20230219154841787</figcaption></figure></blockquote><h3 id="通用寄存器组相关" tabindex="-1"><a class="header-anchor" href="#通用寄存器组相关"><span>通用寄存器组相关</span></a></h3><p>通用寄存器除了存放<strong>源操作数</strong>、<strong>运算结果</strong>外，还可以存放<strong>变址值</strong>（或<strong>基址值</strong>）。因此，<strong>通用寄存器组相关有两种相关</strong>：</p><ol><li>操作数相关</li><li>变址值或基址值相关</li></ol><blockquote><p>发生通用寄存器数据相关的情景：</p></blockquote><p>解决通用寄存器数据相关的方法：</p><ul><li>法1：D型触发器构成的通用寄存器，该构形允许在同一节拍中实现寄存器间的循环传送。</li><li>法2：分析指令推后一个周期执行</li><li>法3：分析指令推后一个节拍执行</li><li>法4：<strong>设置专用通路</strong></li></ul><blockquote><p>【图】D 型触发构成的通用寄存器</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213550084.png" alt="image-20230220213550084" tabindex="0" loading="lazy"><figcaption>image-20230220213550084</figcaption></figure><p>【图】分析指令推后一个周期执行</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213811252.png" alt="image-20230220213811252" tabindex="0" loading="lazy"><figcaption>image-20230220213811252</figcaption></figure><p>【图】分析指令推后一个节拍</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213848470.png" alt="image-20230220213848470" tabindex="0" loading="lazy"><figcaption>image-20230220213848470</figcaption></figure><p>【图】设置专用通路</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213943438.png" alt="image-20230220213943438" tabindex="0" loading="lazy"><figcaption>image-20230220213943438</figcaption></figure></blockquote><p>综上所述，<strong>推后 $分析_{k+1}$</strong> 和<strong>设置相关专用通路</strong>是解决重叠方式相关处理的两种基本方法。 前者以降低速度为代价，使设备不增添；后者以增加设备为代价，使重叠效率不下降。 <strong>^</strong></p><h3 id="变址相关" tabindex="-1"><a class="header-anchor" href="#变址相关"><span>变址相关</span></a></h3><blockquote><p>发生变址相关的情景：</p></blockquote><p>解决变址相关的办法：</p><ul><li>法1：推后分析。</li><li>法2：设置变址相关<strong>专用通路</strong></li></ul><blockquote><p>【图】设置变址相关专用通路</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220214919164.png" alt="image-20230220214919164" tabindex="0" loading="lazy"><figcaption>image-20230220214919164</figcaption></figure></blockquote><h1 id="流水方式" tabindex="-1"><a class="header-anchor" href="#流水方式"><span>流水方式</span></a></h1><p><strong>流水方式</strong>是<strong>把一个重复的过程分解为若干个子过程</strong>，每个子过程可以与其他子过程同时进行。处理机的各个部分都可以采用流水方式工作。如：</p><ul><li>指令执行过程可以采用流水方式。</li><li>运算器操作部件可以采用流水方式。</li><li>访问主存储部件可以采用流水方式。</li><li>处理机之间可以采用流水方式。</li></ul><p>流水特点：</p><ul><li>只有连续提供同类任务才能发挥流水效率</li><li>每个<strong>流水段</strong>都要设置一个流水寄存器</li><li>各流水段的时间应尽量相等</li><li>流水线需有“装入时间”和“排空时间”</li></ul><blockquote><p>【图】流水寄存器</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222185751419.png" alt="image-20230222185751419" tabindex="0" loading="lazy"><figcaption>image-20230222185751419</figcaption></figure></blockquote><blockquote><p>【图】浮点加法器流水时空图</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222185913122.png" alt="image-20230222185913122" tabindex="0" loading="lazy"><figcaption>image-20230222185913122</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222185859626.png" alt="image-20230222185859626" tabindex="0" loading="lazy"><figcaption>image-20230222185859626</figcaption></figure></blockquote><h2 id="流水分类" tabindex="-1"><a class="header-anchor" href="#流水分类"><span>流水分类 * ^</span></a></h2><ul><li>按是否有反馈分：线性、非线性</li><li>按级别分：部件级、处理机级、系统级</li><li>按功能分：单功能、多功能</li><li>按数据表示分：标量流水、向量流水</li><li>按控制方式分：同步流水、异步流水</li></ul><h3 id="按是否有反馈信号分" tabindex="-1"><a class="header-anchor" href="#按是否有反馈信号分"><span>按<strong>是否有反馈信号</strong>分：</span></a></h3><p>线性流水：每个流水段都流过一次且仅流过一次。</p><p>非线性流水：某些流水段之间有反馈回路或前馈回路。</p><p>二者的<strong>区别</strong>在于线性流水仅用连接图表示即可，非线性流水需要连接图+预约表共同表示才行。</p><blockquote><p>【图】非线性流水的连接图和预约表</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222190537190.png" alt="image-20230222190537190" tabindex="0" loading="lazy"><figcaption>image-20230222190537190</figcaption></figure></blockquote><h3 id="按级别分" tabindex="-1"><a class="header-anchor" href="#按级别分"><span>按级别分</span></a></h3><p><strong>部件级流水</strong>：部件内各个子部件间的流水。</p><blockquote><p>【图】浮点加法器的流水线</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192038245.png" alt="image-20230222192038245" tabindex="0" loading="lazy"><figcaption>image-20230222192038245</figcaption></figure></blockquote><p><strong>处理机级流水</strong>：处理机的各部件的流水。</p><blockquote><p>【图】处理机之间的流水线</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192109967.png" alt="image-20230222192109967" tabindex="0" loading="lazy"><figcaption>image-20230222192109967</figcaption></figure></blockquote><p><strong>系统级流水</strong>：多个处理机之间的流水。</p><h3 id="按单多功能分" tabindex="-1"><a class="header-anchor" href="#按单多功能分"><span>按单多功能分</span></a></h3><p><strong>单功能流水</strong>：只能实现单一功能的流水。</p><p><strong>多功能流水</strong>：<strong>同一流水线</strong>的<strong>各段之间</strong>可以有<strong>多种不同的连接方式</strong>以满足<strong>不同的运算需求</strong>。 p178 图5-17</p><h3 id="按静动态分" tabindex="-1"><a class="header-anchor" href="#按静动态分"><span>按静动态分</span></a></h3><p><strong>静态多功能流水</strong>：一次只实现一种运算功能。</p><p><strong>动态多功能流水</strong>：在同一段时间内，各段可以按照不同的方式链接，<strong>同时执行多种功能</strong>。</p><blockquote><p>【图】静态流水线</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192415207.png" alt="image-20230222192415207" tabindex="0" loading="lazy"><figcaption>image-20230222192415207</figcaption></figure></blockquote><blockquote><p>【图】动态流水线</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192652845.png" alt="image-20230222192652845" tabindex="0" loading="lazy"><figcaption>image-20230222192652845</figcaption></figure></blockquote><h3 id="其他分类" tabindex="-1"><a class="header-anchor" href="#其他分类"><span>其他分类</span></a></h3><p>按数据表示分：标量流水和向量流水</p><p>按控制方式分：同步流水和异步流水</p><h2 id="流水的性能分析" tabindex="-1"><a class="header-anchor" href="#流水的性能分析"><span>流水的性能分析</span></a></h2><p>流水的性能指标主要有仨：吞吐率、加速比、效率。</p><ul><li><strong>吞吐率</strong>：流水线单位时间里能流出的任务数或结果数、</li><li><strong>加速比</strong>：用于表示流水方式相对于非流水方式速度提高的比值</li><li><strong>效率</strong>：流水线中设备的实际使用时间占整个运行时间之比</li></ul><p>计算流水性能指标时，一定要结合<strong>时空图</strong>进行巧算速算。</p><p><strong><u>简记：吞吐率看线段，效率看面积</u></strong></p><h3 id="吞吐率" tabindex="-1"><a class="header-anchor" href="#吞吐率"><span>吞吐率</span></a></h3><p><strong>基本公式</strong><br> $$<br> T_p=\\frac{n}{T_k}<br> $$<br> 其中，$T_k$ 是完成 n 个任务所用的时间，且需分两种情况讨论：</p><ul><li>各段时间<strong>相等</strong>时：</li></ul><p>$$<br> T_k=(k+n-1)·Δt<br> $$</p><p>其中，$k$ 为流水线的段数，$Δt$ 为时钟周期</p><ul><li>各段时间<strong>不等</strong>时：</li></ul><p>$$<br> T_p=\\frac{n}{\\sum_{i=1}^k \\Delta t_i+(n-1) \\max \\left(\\Delta \\mathrm{t}<em>1, \\cdots, \\Delta \\mathrm{t}</em>{\\mathrm{k}}\\right)}<br> $$</p><p><strong>时空图速算技巧：</strong><br> $$<br> 吞吐率=\\frac{任务数n}{完成n个任务数所用的时间}<br> $$</p><p>提高流水的吞吐率，主要是消除<strong>瓶颈子过程</strong>。其中瓶颈子过程是指流水线中经过时间最长的子过程。消除瓶颈子过程的主要方法有：</p><ol><li>将瓶颈子过程<strong>再分解</strong>。</li><li>设置<strong>多套瓶颈段并联</strong>。</li></ol><h3 id="效率" tabindex="-1"><a class="header-anchor" href="#效率"><span>效率</span></a></h3><p><strong>基本公式</strong><br> $$<br> E=\\frac{n \\cdot \\sum_{i=1}^k \\Delta t_i}{k·T_k}<br> $$<br> 其中，$k$ 为流水段数，$T_k$ 是完成 n 个任务所用的时间，且需分两种情况讨论：</p><ul><li>各段时间<strong>相等</strong>时：</li></ul><p>$$<br> T_k=(k+n-1)·Δt<br> $$</p><ul><li>各段时间<strong>不等</strong>时：</li></ul><p>$$<br> T_k=\\sum_{i=1}^k \\Delta t_i+(n-1) \\max \\left(\\Delta \\mathrm{t}<em>1, \\cdots, \\Delta \\mathrm{t}</em>{\\mathrm{k}}\\right)<br> $$</p><p><strong>时空图速算技巧：</strong><br> $$<br> 效率=\\frac{n个任务占用的时空面积}{k个流水线的总时空面积}<br> $$</p><blockquote><p>【例】线性流水的性能分析与计算</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222193259692.png" alt="image-20230222193259692" tabindex="0" loading="lazy"><figcaption>image-20230222193259692</figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222193742380.png" alt="image-20230222193742380" tabindex="0" loading="lazy"><figcaption>image-20230222193742380</figcaption></figure></blockquote><h3 id="吞、加、效的关系" tabindex="-1"><a class="header-anchor" href="#吞、加、效的关系"><span>吞、加、效的关系</span></a></h3><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230311163959904.png" alt="image-20230311163959904" tabindex="0" loading="lazy"><figcaption>image-20230311163959904</figcaption></figure><h2 id="非线性流水的调度" tabindex="-1"><a class="header-anchor" href="#非线性流水的调度"><span>非线性流水的调度 *</span></a></h2><p>非线性流水调度的任务是要<strong>找出一个最小的循环周期</strong>，按照此周期向流水线输入新任务，流水线的各个功能段都不会发生冲突，且<strong>吞吐率和效率最高</strong>。</p><p>非线性流水线需要连接图和预约表共同表示才能找到所谓的“最小循环周期”。</p><p>⚠️ 学习非线性流水调度，重点在学懂看**“预约表”**，只要看懂嘞预约表就能从中到得以下信息：</p><ol><li>延迟禁止向量</li><li>初始冲突向量</li><li>根据初始冲突向量画状态图</li><li>根据状态图写出调度方案并找到最佳调度方案以及计算出流水的最大吞吐量。</li></ol><blockquote><p>【图】非线性流水线的连接图和预约表</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222194159933.png" alt="image-20230222194159933" tabindex="0" loading="lazy"><figcaption>image-20230222194159933</figcaption></figure></blockquote><h3 id="非线性流水的冲突及解决" tabindex="-1"><a class="header-anchor" href="#非线性流水的冲突及解决"><span>非线性流水的冲突及解决</span></a></h3><h4 id="冲突场景" tabindex="-1"><a class="header-anchor" href="#冲突场景"><span>冲突场景</span></a></h4><p>了解即可，对非线性流水的冲突有一个直观的印象即可。</p><blockquote><p>【图】启动距离为3的流水线冲突情况</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223193502679.png" alt="image-20230223193502679" tabindex="0" loading="lazy"><figcaption>image-20230223193502679</figcaption></figure><p>【图】启动距离为2的流水冲突情况</p><figure><img src="https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223193704881.png" alt="image-20230223193704881" tabindex="0" loading="lazy"><figcaption>image-20230223193704881</figcaption></figure></blockquote><h4 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法"><span>解决办法 *</span></a></h4><p>引入<strong>延迟禁止向量</strong>、<strong>初始冲突向量</strong>、<strong>状态图</strong>，借助这3样东西找到“最小的循环周期”。其中延迟禁止向量、初始冲突向量概念如下：</p><p><strong>延迟禁止向量</strong>：预约表中每一行任何两个&quot;X&quot;之间距离的集合。</p><p><strong>初始冲突向量</strong>：$C=(C_mC_{m-1}···C_2C_1)$，其中<strong>m是禁止向量中的最大值</strong>。</p><blockquote><p>非线性流水冲突的解决办法是在 1971 年由 E.S.Davidson 及其学生提出</p></blockquote><p><b style="color:red;">如何确定延迟禁止向量？</b></p><p><b style="color:red;">如何确定初始冲突向量？</b></p><p>初始冲突向量的式子：$C<sub>N-1</sub>···C<sub>i</sub>···C<sub>2</sub>C<sub>1</sub>$ <strong>N是拍数（上面那张图的拍数是7）</strong></p><p>以上图为例，根据延迟禁止向量$F={1,3,6}$，在对应的位置填1，其余填0</p><table><thead><tr><th style="text-align:center;">C<sub>6</sub></th><th style="text-align:center;">C<sub>5</sub></th><th style="text-align:center;">C<sub>4</sub></th><th style="text-align:center;">C<sub>3</sub></th><th style="text-align:center;">C<sub>2</sub></th><th style="text-align:center;">C<sub>1</sub></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td><td style="text-align:center;">1</td></tr></tbody></table><p>由此得出初始冲突向量为：$C(100101)$</p><p><b style="color:red;">如何根据初始冲突向量画出状态转移图？</b></p><p><b style="color:red;">如何根据状态转移图罗列调度方案？</b></p><p>能形成闭环的，就算一种调度方案。如上图有：（2,5）、（2,2,5）、（4,5）、（4）、（5）。</p><p>对上述解答有质疑，因为1904#28题的最佳调度方案不符我的预期，需要进一步理解怎样才可算一种调度方案，以及如何正确罗列调度方案。</p><p><b style="color:red;">如何在调度方案中确定<u>最佳调度方案</u>及该方案的<u>最小平均延迟</u>？</b></p><p>根据状态转移图罗列所有的调度方案，箭头连接可构成一个闭环算一种方案</p><p><b style="color:red;">如何给出当前流水的最大吞吐量？</b></p><p>只要找到了最佳调度方法并算出其最小平均延迟，即可求得当前流水的最大吞吐率：$T<sub>p</sub>=1/最小平均延迟$</p><h2 id="流水的相关处理" tabindex="-1"><a class="header-anchor" href="#流水的相关处理"><span>流水的相关处理</span></a></h2><h2 id="局部相关" tabindex="-1"><a class="header-anchor" href="#局部相关"><span>局部相关</span></a></h2><h2 id="全局相关" tabindex="-1"><a class="header-anchor" href="#全局相关"><span>全局相关 ^</span></a></h2><p><strong>全局性相关</strong>：转移指令和其后的指令之间存在关联，使得处理机不能同时解释，造成对流水机器的吞吐率和效率的下降。严格来说就是<strong>已进入流水线的转移指令和其后续指令之间相关</strong>。</p><p>如何处理全局性相关问题 ？（两个加快，一个猜测，一个转移）</p><ol><li>加快和提前形成条件码；</li><li>加快短循环程序的处理。</li><li>使用猜测法；</li><li>采取延迟转移；</li></ol><h1 id="指令级高度并行的超级处理机" tabindex="-1"><a class="header-anchor" href="#指令级高度并行的超级处理机"><span>指令级高度并行的超级处理机 **</span></a></h1><p>自 20 世纪 80 年代 RISC 兴起后，出现了提高指令级并行的高性能超级处理机，使得单处理可以在每个时钟周期里解释多条指令。如：</p><ul><li>超标量处理机</li><li>超流水线处理机</li><li><strong>超标量超流水线处理机</strong></li><li>超长指令字处理机</li></ul><h2 id="超标量处理机" tabindex="-1"><a class="header-anchor" href="#超标量处理机"><span>超标量处理机</span></a></h2><p>略。</p><h2 id="超流水线处理机" tabindex="-1"><a class="header-anchor" href="#超流水线处理机"><span>超流水线处理机</span></a></h2><blockquote><p>【问】简述<strong>超流水处理机</strong>提高<strong>指令级并行</strong>的<strong>方法</strong>和<strong>特点</strong> <strong>1204</strong></p><p>【答】方法：着重<strong>开发时间并行性</strong>，在公共硬件上采用<strong>短时钟周期</strong>和<strong>深度流水</strong>来<strong>提高速度</strong>；特点：并行度高；充分利用公共硬件；但需要<strong>高速时钟机制</strong>，否则无法实现超流水线。</p></blockquote><h2 id="超标量和超流水处理机的区别" tabindex="-1"><a class="header-anchor" href="#超标量和超流水处理机的区别"><span>超标量和超流水处理机的区别 ^ *</span></a></h2><blockquote><p>【问】<strong>超标量处理机</strong>和<strong>超流水处理机</strong>的区别 <strong>2008</strong></p><p>【答】超标量处理机利用<strong>资源重复</strong>，设置多个<strong>执行部件寄存器堆端口</strong>。超流水线处理机则<strong>着重开发时间并行性</strong>，在公共的硬件上采用<strong>短时钟周期</strong>和<strong>深度流水</strong>来提高速度。</p></blockquote><h2 id="超标量超流水线处理机" tabindex="-1"><a class="header-anchor" href="#超标量超流水线处理机"><span>超标量超流水线处理机</span></a></h2><p>超标量超流水线处理机是<strong>超标量流水线</strong>和<strong>超流水线</strong>处理机的结合。</p><blockquote><p>【问】什么是超标量超流水处理机？</p><p>【答】超标量超流水处理机是超标量流水线和超流水线的结合。</p></blockquote><h2 id="超长指令字处理机" tabindex="-1"><a class="header-anchor" href="#超长指令字处理机"><span>超长指令字处理机</span></a></h2><p>超长指令字结构是将<strong>水平型微码</strong>和<strong>超标量处理</strong>相结合。 <strong>^</strong></p>`,183)]))}const p=e(a,[["render",s],["__file"," 5 标量处理机.html.vue"]]),h=JSON.parse('{"path":"/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%205%20%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E6%9C%BA.html","title":"标量处理机","lang":"zh-CN","frontmatter":{"title":"标量处理机","order":5,"icon":"file","category":["系统结构","理论基础"],"description":"标量处理机 真题 简答题 【重叠方式篇】 简述指令重叠的概念及实现重叠解释必须满足的要求 1510 1404 【流水方式篇】 简述多功能流水线的概念和静动态流水线分类的依据 2204 简述 IBM360/91 解决流水控制的途径 1910 ** （熟读） 源自教材习题5-10：试总结 IBM360/91 解决流水控制的一般方法、途径和特点 IMG_98...","head":[["meta",{"property":"og:url","content":"https://zhengzhenning.github.io/yibu_zzn/yibu_zzn/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%205%20%E6%A0%87%E9%87%8F%E5%A4%84%E7%90%86%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"郑振宁"}],["meta",{"property":"og:title","content":"标量处理机"}],["meta",{"property":"og:description","content":"标量处理机 真题 简答题 【重叠方式篇】 简述指令重叠的概念及实现重叠解释必须满足的要求 1510 1404 【流水方式篇】 简述多功能流水线的概念和静动态流水线分类的依据 2204 简述 IBM360/91 解决流水控制的途径 1910 ** （熟读） 源自教材习题5-10：试总结 IBM360/91 解决流水控制的一般方法、途径和特点 IMG_98..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9805.jpeg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T02:36:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-12T02:36:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"标量处理机\\",\\"image\\":[\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9805.jpeg\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326172654580.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219104220037.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326172947159.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219105231031.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326174229124.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219105353523.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230326181052084.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219105149847.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219113240787.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219113544503.png\\",\\"https://cdn.mathpix.com/snip/images/MQFQVaL2eOrKZ3vS7tMkKDimzVCO3GRf4dvy1taoXBI.original.fullsize.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219114655826.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219114848505.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219154046329.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230219154841787.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213550084.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213811252.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213848470.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220213943438.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230220214919164.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222185751419.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222185913122.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222185859626.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222190537190.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192038245.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192109967.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192415207.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222192652845.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222193259692.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222193742380.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230311163959904.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230222194159933.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223193502679.png\\",\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/image-20230223193704881.png\\"],\\"dateModified\\":\\"2024-04-12T02:36:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://zhengzhenning.github.io/yibu_zzn/\\"}]}"]]},"headers":[{"level":2,"title":"简答题","slug":"简答题","link":"#简答题","children":[]},{"level":2,"title":"应用题","slug":"应用题","link":"#应用题","children":[{"level":3,"title":"指令重叠执行表达式 ** **","slug":"指令重叠执行表达式","link":"#指令重叠执行表达式","children":[]},{"level":3,"title":"非线性流水调度","slug":"非线性流水调度","link":"#非线性流水调度","children":[]},{"level":3,"title":"流水时空图","slug":"流水时空图","link":"#流水时空图","children":[]}]},{"level":2,"title":"指令的重叠解释","slug":"指令的重叠解释","link":"#指令的重叠解释","children":[]},{"level":2,"title":"指令的三种执行方式","slug":"指令的三种执行方式","link":"#指令的三种执行方式","children":[{"level":3,"title":"1、顺序执行方式","slug":"_1、顺序执行方式","link":"#_1、顺序执行方式","children":[]},{"level":3,"title":"2、一次重叠执行方式","slug":"_2、一次重叠执行方式","link":"#_2、一次重叠执行方式","children":[]},{"level":3,"title":"3、两次重叠执行方式","slug":"_3、两次重叠执行方式","link":"#_3、两次重叠执行方式","children":[]}]},{"level":2,"title":"重叠的相关处理","slug":"重叠的相关处理","link":"#重叠的相关处理","children":[{"level":3,"title":"指令相关","slug":"指令相关","link":"#指令相关","children":[]},{"level":3,"title":"主存空间数相关","slug":"主存空间数相关","link":"#主存空间数相关","children":[]},{"level":3,"title":"通用寄存器组相关","slug":"通用寄存器组相关","link":"#通用寄存器组相关","children":[]},{"level":3,"title":"变址相关","slug":"变址相关","link":"#变址相关","children":[]}]},{"level":2,"title":"流水分类 * ^","slug":"流水分类","link":"#流水分类","children":[{"level":3,"title":"按是否有反馈信号分：","slug":"按是否有反馈信号分","link":"#按是否有反馈信号分","children":[]},{"level":3,"title":"按级别分","slug":"按级别分","link":"#按级别分","children":[]},{"level":3,"title":"按单多功能分","slug":"按单多功能分","link":"#按单多功能分","children":[]},{"level":3,"title":"按静动态分","slug":"按静动态分","link":"#按静动态分","children":[]},{"level":3,"title":"其他分类","slug":"其他分类","link":"#其他分类","children":[]}]},{"level":2,"title":"流水的性能分析","slug":"流水的性能分析","link":"#流水的性能分析","children":[{"level":3,"title":"吞吐率","slug":"吞吐率","link":"#吞吐率","children":[]},{"level":3,"title":"效率","slug":"效率","link":"#效率","children":[]},{"level":3,"title":"吞、加、效的关系","slug":"吞、加、效的关系","link":"#吞、加、效的关系","children":[]}]},{"level":2,"title":"非线性流水的调度 *","slug":"非线性流水的调度","link":"#非线性流水的调度","children":[{"level":3,"title":"非线性流水的冲突及解决","slug":"非线性流水的冲突及解决","link":"#非线性流水的冲突及解决","children":[]}]},{"level":2,"title":"流水的相关处理","slug":"流水的相关处理","link":"#流水的相关处理","children":[]},{"level":2,"title":"局部相关","slug":"局部相关","link":"#局部相关","children":[]},{"level":2,"title":"全局相关 ^","slug":"全局相关","link":"#全局相关","children":[]},{"level":2,"title":"超标量处理机","slug":"超标量处理机","link":"#超标量处理机","children":[]},{"level":2,"title":"超流水线处理机","slug":"超流水线处理机","link":"#超流水线处理机","children":[]},{"level":2,"title":"超标量和超流水处理机的区别 ^ *","slug":"超标量和超流水处理机的区别","link":"#超标量和超流水处理机的区别","children":[]},{"level":2,"title":"超标量超流水线处理机","slug":"超标量超流水线处理机","link":"#超标量超流水线处理机","children":[]},{"level":2,"title":"超长指令字处理机","slug":"超长指令字处理机","link":"#超长指令字处理机","children":[]}],"git":{"createdTime":1712889399000,"updatedTime":1712889399000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":1}]},"readingTime":{"minutes":14.25,"words":4274},"filePathRelative":"系统结构/ 5 标量处理机.md","localizedDate":"2024年4月12日","excerpt":"\\n<h1>真题</h1>\\n<h2>简答题</h2>\\n<p>【重叠方式篇】</p>\\n<p>简述指令重叠的概念及实现重叠解释必须满足的要求 <strong>1510</strong> <strong>1404</strong></p>\\n<p>【流水方式篇】</p>\\n<p>简述多功能流水线的概念和静动态流水线分类的依据 <strong>2204</strong></p>\\n<p>简述 IBM360/91 解决流水控制的途径 <strong>1910</strong> ** （熟读）</p>\\n<blockquote>\\n<p>源自教材习题5-10：<strong>试总结  IBM360/91 解决流水控制的一般方法、途径和特点</strong></p>\\n<figure><img src=\\"https://cdn.jsdelivr.net/gh/zhengzhenning/imageBeds@main/images/IMG_9805.jpeg\\" alt=\\"IMG_9805\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>IMG_9805</figcaption></figure>\\n</blockquote>","autoDesc":true}');export{p as comp,h as data};

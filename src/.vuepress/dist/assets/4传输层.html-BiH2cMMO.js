import{_ as t,c as a,o as i,d as e}from"./app-B4W1_6Ag.js";const n={},r=e(`<h1 id="传输层-100°" tabindex="-1"><a class="header-anchor" href="#传输层-100°"><span>传输层 <mark>100°</mark> *</span></a></h1><h1 id="常见的默认端口号" tabindex="-1"><a class="header-anchor" href="#常见的默认端口号"><span>常见的默认端口号 <mark>*</mark></span></a></h1><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48msznuj30ke0gydgh.jpg" alt="常见的默认端口号-必知必会" tabindex="0" loading="lazy"><figcaption>常见的默认端口号-必知必会</figcaption></figure><h1 id="udp" tabindex="-1"><a class="header-anchor" href="#udp"><span>UDP</span></a></h1><p><strong>概念</strong></p><p>UDP协议提供了<strong>无连接</strong>、<strong>不可靠</strong>、<strong>数据报尽力</strong>传输服务。收方双方通信时，直接进行数据传输。</p><p><strong>优点</strong></p><ol><li>**可控。**可以控制进程的数据传输机制。</li><li>**实时性高。**不用建立连接。</li><li>**开销小。**不用维护通信链路。</li></ol><p><strong>多路复用与分解</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- UDP 套接字 ：使用二元组实现精准分解--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">目的ip</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">，目的port&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>分配UDP套接字的端口号有2种方式 <mark>*</mark>：</p><p>① 创建UDP套接字时，传输层为其分配端口号</p><p>② 创建UDP套件字时，调用<code>bind()</code>指定端口号。</p><p><strong>应用</strong></p><p>IP电话、视频会议。（实时性）</p><h2 id="udp数据报" tabindex="-1"><a class="header-anchor" href="#udp数据报"><span>UDP数据报 <mark>*</mark></span></a></h2><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48hz1syj30za0k4wgz.jpg" alt="image-20210718172318949" tabindex="0" loading="lazy"><figcaption>image-20210718172318949</figcaption></figure><h1 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP</span></a></h1><p><mark><strong>概念</strong></mark> (1904卷：简述TCP面向连接服务)</p><p><strong>面向连接</strong>、<strong>可靠</strong>、<strong>有序</strong>的<strong>字节流</strong>服务。收方双方在通信前，先建立传输链路，再进行数据传输，结束后拆除链路。是全双工通信服务。</p><p><strong>多路复用与分解</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">&lt;!-- TCP 套接字 ：使用四元组实现精准分解--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">源ip</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">，源port，目的ip，目的port&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：<code>源ip，目的ip</code> 是TCP报文段的<strong>IP的首部字段</strong>；<code>源port，目的port</code>封装了TCP报文段的<strong>首部字段</strong></p><h2 id="tcp报文段" tabindex="-1"><a class="header-anchor" href="#tcp报文段"><span>TCP报文段 <mark>*</mark></span></a></h2><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48izjzoj30zc0ra42j.jpg" alt="image-20210718172404752" tabindex="0" loading="lazy"><figcaption>image-20210718172404752</figcaption></figure><p><strong>应试</strong></p><blockquote><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48jxm2rj30pk0650ta.jpg" alt="IMG_33F5454AB4D2-1" tabindex="0" loading="lazy"><figcaption>IMG_33F5454AB4D2-1</figcaption></figure><p>思路</p><p>16进制转10进制，需记住：0-9 10-15（A-F）。</p><p>再用 IP长度-（IP头+TCP头）=TCP数据部分的长度。</p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48mazarj312y0u041o.jpg" alt="IMG_75DFEB6DCC3F-1" tabindex="0" loading="lazy"><figcaption>IMG_75DFEB6DCC3F-1</figcaption></figure><p><strong>题目</strong></p><p>这道题有待理解，解题思路是啥不太清楚。</p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48la6lrj30oq0ad75m.jpg" alt="IMG_8BAD1D4336FF-1" tabindex="0" loading="lazy"><figcaption>IMG_8BAD1D4336FF-1</figcaption></figure></blockquote><h2 id="tcp流量控制" tabindex="-1"><a class="header-anchor" href="#tcp流量控制"><span><a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=60" target="_blank" rel="noopener noreferrer">TCP流量控制</a></span></a></h2><p><em>让发送方的发送速率不要太快，让接收方来得及接收。</em></p><p>发方发得太快，收方可能来不及接收，导致数据丢失。因此需引入<strong>流量控制</strong>协调双方的数据收发速度。使用<strong>滑动窗口</strong>机制实现流量控制。</p><h2 id="tcp可靠数据传输" tabindex="-1"><a class="header-anchor" href="#tcp可靠数据传输"><span><a href="https://www.bilibili.com/video/BV1c4411d7jb/?p=63" target="_blank" rel="noopener noreferrer"><strong>TCP可靠数据传输</strong></a></span></a></h2><p>基于“<strong>以字节为单位的滑动窗口</strong>”实现可靠数据传输。</p><p>利用差错检测、确认、序号、重传、计时器实现可靠数据传输。</p><h2 id="tcp拥塞控制-100°" tabindex="-1"><a class="header-anchor" href="#tcp拥塞控制-100°"><span><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=61" target="_blank" rel="noopener noreferrer">TCP拥塞控制</a> <mark>100°</mark> * **</span></a></h2><p>拥塞控制：合理调度、规范、调整网络中发送数据的主机数、发送速率、数据量。</p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48jf3xvj31020qa40e.jpg" alt="拥塞及控制" tabindex="0" loading="lazy"><figcaption>拥塞及控制</figcaption></figure><p>拥塞控制与不控制的差别：</p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48kufkij31ku0qqgpo.jpg" alt="image-20210711161815448" tabindex="0" loading="lazy"><figcaption>image-20210711161815448</figcaption></figure><p><strong>TCP 四种拥塞控制算法</strong>实现拥塞控制。</p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48iki0cj321y06ytaj.jpg" alt="image-20210711161930200" tabindex="0" loading="lazy"><figcaption>image-20210711161930200</figcaption></figure><h3 id="慢启动" tabindex="-1"><a class="header-anchor" href="#慢启动"><span>慢启动</span></a></h3><p>**在慢开始阶段，**每经过1个RTT，阈值+2（2倍）。</p><h3 id="拥塞避免" tabindex="-1"><a class="header-anchor" href="#拥塞避免"><span>拥塞避免</span></a></h3><p>在拥塞避免阶段，每经过1个RTT，阈值+1。默认阈值为16。当阈值等于16时，进入拥塞避免阶段，<strong>在拥塞避免阶段，每经过一个RTT，阈值+1</strong>。</p><h3 id="快速重传" tabindex="-1"><a class="header-anchor" href="#快速重传"><span>快速重传</span></a></h3><p>...</p><h3 id="快速恢复" tabindex="-1"><a class="header-anchor" href="#快速恢复"><span>快速恢复</span></a></h3><p>在拥塞避免阶段，若发方收到3次重复ACK，则说明网络拥塞，需将阈值减半，并进入拥塞避免阶段。</p><p>拥塞控制算法：<mark>*</mark></p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48lt47cj31jq0n2dkj.jpg" alt="image-20210711164321344" tabindex="0" loading="lazy"><figcaption>image-20210711164321344</figcaption></figure><p>不管是哪个阶段，其目的就是调整“拥塞窗口”，以避免拥塞或尽快消除已发送的拥塞。</p><p><strong>应试</strong></p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48kfjuuj315m0u041s.jpg" alt="IMG_6A910FA562A0-1" tabindex="0" loading="lazy"><figcaption>IMG_6A910FA562A0-1</figcaption></figure><p>（1）：SA 慢启动 BC 拥塞避免 FG 慢启动</p><p>（2）：</p><ul><li>A 三个重复ACK表征的丢包</li><li>C 三个重复ACK表征的丢包</li><li>E 计时器超时</li><li>G 拥塞窗口达到阈值，指数加速变线性加速</li></ul><p>（3）：一样。</p><p>（4）：需要不停地改变。</p><h2 id="tcp-三次握手四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手四次挥手"><span>TCP 三次握手四次挥手 *</span></a></h2><p>目的：彼此确定双方的接收、发送能力。</p><p><strong>三次握手</strong></p><p>第1次，客户端向服务端发送试探报文（SYN）</p><p>第2次，服务端向客户端发送试探报文（SYN）</p><p>第3次，客户端向服务端发送确认报文（ACK）</p><p>如果中途握手失败，会进行重传。</p><p><strong>四次挥手👋🏻</strong></p><p>原因：TCP的半关闭状态导致需要四次挥手才能断开连接</p><p>第1次，客户端向服务端发送终止报文（FIN）</p><p>第2次，服务端向客户端发送确认报文（ACK）</p><p>第3次，服务端向客户端发送终止报文（FIN）</p><p>第4次，客户端向服务端发送确认报文（ACK）</p><p>只有双方都有意向关闭时，才能断开连接。</p><h2 id="tcp-socket-api" tabindex="-1"><a class="header-anchor" href="#tcp-socket-api"><span>TCP Socket API <mark>*</mark></span></a></h2><p>TCP客户与服务器的典型Socket API调用过程</p>`,74),s=[r];function p(g,l){return i(),a("div",null,s)}const h=t(n,[["render",p],["__file","4传输层.html.vue"]]),c=JSON.parse('{"path":"/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/4%E4%BC%A0%E8%BE%93%E5%B1%82.html","title":"传输层","lang":"zh-CN","frontmatter":{"title":"传输层","order":5,"icon":"file","category":["网络原理","理论基础"],"description":"传输层 100° * 常见的默认端口号 * 常见的默认端口号-必知必会常见的默认端口号-必知必会 UDP 概念 UDP协议提供了无连接、不可靠、数据报尽力传输服务。收方双方通信时，直接进行数据传输。 优点 **可控。**可以控制进程的数据传输机制。 **实时性高。**不用建立连接。 **开销小。**不用维护通信链路。 多路复用与分解 分配UDP套接字的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/yibu_zzn/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/4%E4%BC%A0%E8%BE%93%E5%B1%82.html"}],["meta",{"property":"og:site_name","content":"郑振宁的数字资产中心"}],["meta",{"property":"og:title","content":"传输层"}],["meta",{"property":"og:description","content":"传输层 100° * 常见的默认端口号 * 常见的默认端口号-必知必会常见的默认端口号-必知必会 UDP 概念 UDP协议提供了无连接、不可靠、数据报尽力传输服务。收方双方通信时，直接进行数据传输。 优点 **可控。**可以控制进程的数据传输机制。 **实时性高。**不用建立连接。 **开销小。**不用维护通信链路。 多路复用与分解 分配UDP套接字的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48msznuj30ke0gydgh.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-11T06:55:35.000Z"}],["meta",{"property":"article:author","content":"郑振宁"}],["meta",{"property":"article:modified_time","content":"2024-04-11T06:55:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"传输层\\",\\"image\\":[\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48msznuj30ke0gydgh.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48hz1syj30za0k4wgz.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48izjzoj30zc0ra42j.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48jxm2rj30pk0650ta.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48mazarj312y0u041o.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48la6lrj30oq0ad75m.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48jf3xvj31020qa40e.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48kufkij31ku0qqgpo.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48iki0cj321y06ytaj.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48lt47cj31jq0n2dkj.jpg\\",\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48kfjuuj315m0u041s.jpg\\"],\\"dateModified\\":\\"2024-04-11T06:55:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"UDP数据报 *","slug":"udp数据报","link":"#udp数据报","children":[]},{"level":2,"title":"TCP报文段   *","slug":"tcp报文段","link":"#tcp报文段","children":[]},{"level":2,"title":"TCP流量控制","slug":"tcp流量控制","link":"#tcp流量控制","children":[]},{"level":2,"title":"TCP可靠数据传输","slug":"tcp可靠数据传输","link":"#tcp可靠数据传输","children":[]},{"level":2,"title":"TCP拥塞控制   100° * **","slug":"tcp拥塞控制-100°","link":"#tcp拥塞控制-100°","children":[{"level":3,"title":"慢启动","slug":"慢启动","link":"#慢启动","children":[]},{"level":3,"title":"拥塞避免","slug":"拥塞避免","link":"#拥塞避免","children":[]},{"level":3,"title":"快速重传","slug":"快速重传","link":"#快速重传","children":[]},{"level":3,"title":"快速恢复","slug":"快速恢复","link":"#快速恢复","children":[]}]},{"level":2,"title":"TCP 三次握手四次挥手 *","slug":"tcp-三次握手四次挥手","link":"#tcp-三次握手四次挥手","children":[]},{"level":2,"title":"TCP Socket API *","slug":"tcp-socket-api","link":"#tcp-socket-api","children":[]}],"git":{"createdTime":1712807044000,"updatedTime":1712818535000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":2}]},"readingTime":{"minutes":3.74,"words":1121},"filePathRelative":"网络原理/4传输层.md","localizedDate":"2024年4月11日","excerpt":"\\n<h1>常见的默认端口号   <mark>*</mark></h1>\\n<figure><img src=\\"https://tva1.sinaimg.cn/large/008vxvgGgy1h7r48msznuj30ke0gydgh.jpg\\" alt=\\"常见的默认端口号-必知必会\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>常见的默认端口号-必知必会</figcaption></figure>\\n<h1>UDP</h1>\\n<p><strong>概念</strong></p>\\n<p>UDP协议提供了<strong>无连接</strong>、<strong>不可靠</strong>、<strong>数据报尽力</strong>传输服务。收方双方通信时，直接进行数据传输。</p>","autoDesc":true}');export{h as comp,c as data};

import{_ as t,r as e,o as p,c as o,a as n,b as s,d as c,e as i}from"./app-BithkOTx.js";const l={},u=n("h1",{id:"事件处理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件处理"},[n("span",null,"事件处理")])],-1),r=n("p",null,"推进业务流程的方式有很多种，事件驱动是其中一种，也是使用最广泛的。依托事件驱动业务流程往下走，需要搞清楚3个问题：",-1),k={href:"https://www.activiti.org/userguide/index.html#eventDispatcherEventTypes",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,"各类型事件触发的顺序",-1),v=n("li",null,"各类型事件触发的时机",-1),m=i(`<p>弄清这3个问题，才能保证&quot;事件驱动&quot;不会对业务流程造成破坏。在实践过程中，<strong>多实例实现会签</strong>和<strong>并行网关实现会签</strong>触发的事件机制不同会对业务流程造成破坏。</p><p><b style="color:red;">全局统一事件处理（策略模式）</b></p><figure><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74vcr633aj30vk0l4my8.jpg" alt="image-20220630211507112" tabindex="0" loading="lazy"><figcaption>image-20220630211507112</figcaption></figure><p>核心代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@program</span>: workflow-engine
 * <span class="token keyword">@description</span>: 流程实例运行时监听器
 * <span class="token keyword">@packagename</span>: com.wk.workflow.service.act.listener
 * <span class="token keyword">@author</span>: 振振
 * <span class="token keyword">@date</span>: 2022-04-20 16:16
 **/</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalActListener</span> <span class="token keyword">implements</span> <span class="token class-name">ActivitiEventListener</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalActListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * TODO Spring 自动将类型注入到此集合里
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventHandler</span><span class="token punctuation">&gt;</span></span> handlerList<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 各细分事件处理类集合
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActivitiEventType</span><span class="token punctuation">,</span> <span class="token class-name">EventHandler</span><span class="token punctuation">&gt;</span></span> handlers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * TODO 注入
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[全局事件]待注入元素:{} size&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>handlerList<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        handlers<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[全局事件]清理 handlers 完成，清理完成，剩余元素:{} size&quot;</span><span class="token punctuation">,</span> handlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        handlers <span class="token operator">=</span> handlerList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">EventHandler</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token punctuation">.</span><span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[全局事件]注入 handlers 完成，注入完成，注入元素:{} size&quot;</span><span class="token punctuation">,</span> handlers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[全局事件]事件策略初始化完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * Called when an event has been fired
     *
     * <span class="token keyword">@param</span> <span class="token parameter">event</span> the event
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span><span class="token class-name">ActivitiEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handlers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>handlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[全局事件] {}事件触发了... processDefinitionId:{},processInstanceId:{}&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getProcessDefinitionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getProcessInstanceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EventHandler</span> eventHandler <span class="token operator">=</span> handlers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>eventHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            eventHandler<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * <span class="token keyword">@return</span> whether or not the current operation should fail when this listeners execution throws an exception.
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFailOnException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>事件统一处理类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@program</span>: workflow-engine
 * <span class="token keyword">@description</span>: Activiti事件统一处理类
 * <span class="token keyword">@packagename</span>: com.wk.workflow.service.act.listener
 * <span class="token keyword">@author</span>: 振振
 * <span class="token keyword">@date</span>: 2022-04-20 16:25
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventHandler</span> <span class="token punctuation">{</span>

    <span class="token class-name">Boolean</span> <span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ActivitiEventType</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">ActivitiEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>某个具体的实现类</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@program</span>: workflow-engine
 * <span class="token keyword">@description</span>: 任务创建时
 * <span class="token keyword">@packagename</span>: com.wk.workflow.service.act.listener.impl
 * <span class="token keyword">@author</span>: 振振
 * <span class="token keyword">@date</span>: 2022-04-20 16:37
 **/</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActVariableUpdatedEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log<span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ActVariableUpdatedEventListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ActivitiEventType</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ActivitiEventType</span><span class="token punctuation">.</span><span class="token constant">VARIABLE_UPDATED</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token class-name">ActivitiEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[全局事件] {} handler executing...&quot;</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9);function b(g,y){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,r,n("ol",null,[n("li",null,[s("事件的类型有哪些 🔗 "),n("a",k,[s("看各种事件类型"),c(a)])]),d,v]),m])}const w=t(l,[["render",b],["__file","Activiti7 8 事件_.html.vue"]]),h=JSON.parse('{"path":"/Activiti7%E7%AC%94%E8%AE%B0/Activiti7%208%20%E4%BA%8B%E4%BB%B6_.html","title":"事件处理","lang":"zh-CN","frontmatter":{"description":"事件处理 推进业务流程的方式有很多种，事件驱动是其中一种，也是使用最广泛的。依托事件驱动业务流程往下走，需要搞清楚3个问题： 事件的类型有哪些 🔗 看各种事件类型 各类型事件触发的顺序 各类型事件触发的时机 弄清这3个问题，才能保证\\"事件驱动\\"不会对业务流程造成破坏。在实践过程中，多实例实现会签和并行网关实现会签触发的事件机制不同会对业务流程造成破坏...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/yibu_zzn/Activiti7%E7%AC%94%E8%AE%B0/Activiti7%208%20%E4%BA%8B%E4%BB%B6_.html"}],["meta",{"property":"og:site_name","content":"郑振宁的数字资产中心"}],["meta",{"property":"og:title","content":"事件处理"}],["meta",{"property":"og:description","content":"事件处理 推进业务流程的方式有很多种，事件驱动是其中一种，也是使用最广泛的。依托事件驱动业务流程往下走，需要搞清楚3个问题： 事件的类型有哪些 🔗 看各种事件类型 各类型事件触发的顺序 各类型事件触发的时机 弄清这3个问题，才能保证\\"事件驱动\\"不会对业务流程造成破坏。在实践过程中，多实例实现会签和并行网关实现会签触发的事件机制不同会对业务流程造成破坏..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://tva1.sinaimg.cn/large/008vxvgGly1h74vcr633aj30vk0l4my8.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:32:58.000Z"}],["meta",{"property":"article:author","content":"郑振宁"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:32:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件处理\\",\\"image\\":[\\"https://tva1.sinaimg.cn/large/008vxvgGly1h74vcr633aj30vk0l4my8.jpg\\"],\\"dateModified\\":\\"2024-03-26T09:32:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1711445578000,"updatedTime":1711445578000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":1}]},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"Activiti7笔记/Activiti7 8 事件*.md","localizedDate":"2024年3月26日","excerpt":"\\n<p>推进业务流程的方式有很多种，事件驱动是其中一种，也是使用最广泛的。依托事件驱动业务流程往下走，需要搞清楚3个问题：</p>\\n<ol>\\n<li>事件的类型有哪些 🔗 <a href=\\"https://www.activiti.org/userguide/index.html#eventDispatcherEventTypes\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">看各种事件类型</a></li>\\n<li>各类型事件触发的顺序</li>\\n<li>各类型事件触发的时机</li>\\n</ol>\\n<p>弄清这3个问题，才能保证\\"事件驱动\\"不会对业务流程造成破坏。在实践过程中，<strong>多实例实现会签</strong>和<strong>并行网关实现会签</strong>触发的事件机制不同会对业务流程造成破坏。</p>","autoDesc":true}');export{w as comp,h as data};

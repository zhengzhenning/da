import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as o,a as s,b as n,d as l,e as a}from"./app-Dj87yhX9.js";const i={},u=a('<h1 id="问题与风险-qr" tabindex="-1"><a class="header-anchor" href="#问题与风险-qr"><span>问题与风险（QR）</span></a></h1><h1 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h1><h2 id="定制任务结点、扩展任务属性" tabindex="-1"><a class="header-anchor" href="#定制任务结点、扩展任务属性"><span>定制任务结点、扩展任务属性</span></a></h2>',3),k={href:"https://blog.csdn.net/makeryan/article/details/77000412",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方" tabindex="-1"><a class="header-anchor" href="#使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方"><span>使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方</span></a></h2><p>解决方案：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>// 重试组件
compile &#39;com.github.rholder:guava-retrying:2.0.0&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>调用</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">validateProcessInstanceStartedNew</span><span class="token punctuation">(</span><span class="token class-name">String</span> processInstanceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Boolean</span> result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateProcessInstanceStartedRetryer</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[流程实例]校验流程实例{}是否启动成功:{}&quot;</span><span class="token punctuation">,</span> processInstanceId<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> result<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> <span class="token operator">|</span> <span class="token class-name">RetryException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[流程实例]校验流程实例{}启动失败:{}&quot;</span><span class="token punctuation">,</span> processInstanceId<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重试规则</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> <span class="token function">validateProcessInstanceStartedRetryer</span><span class="token punctuation">(</span><span class="token class-name">String</span> processInstanceId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">RetryException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">validateProcessInstanceStartedRevoke</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">Retryer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> retryer <span class="token operator">=</span> <span class="token class-name">RetryerBuilder</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 返回false时重试</span>
                <span class="token punctuation">.</span><span class="token function">retryIfResult</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token operator">::</span><span class="token function">equals</span><span class="token punctuation">)</span>
                <span class="token comment">// 抛出运行时异常时重试</span>
                <span class="token punctuation">.</span><span class="token function">retryIfRuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 每次间隔1秒</span>
                <span class="token punctuation">.</span><span class="token function">withWaitStrategy</span><span class="token punctuation">(</span><span class="token class-name">WaitStrategies</span><span class="token punctuation">.</span><span class="token function">fixedWait</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 重试6次</span>
               <span class="token punctuation">.</span><span class="token function">withStopStrategy</span><span class="token punctuation">(</span><span class="token class-name">StopStrategies</span><span class="token punctuation">.</span><span class="token function">stopAfterAttempt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withRetryListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValidateProcessInstanceStaredListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 调用目标函数</span>
        <span class="token keyword">return</span> retryer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>重试依据</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> <span class="token function">validateProcessInstanceStartedRevoke</span><span class="token punctuation">(</span><span class="token class-name">String</span> processInstanceId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Boolean</span> isStarted <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Task</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> taskService<span class="token punctuation">.</span><span class="token function">createTaskQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">processInstanceId</span><span class="token punctuation">(</span>processInstanceId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isStarted <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> isStarted<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="node对象转java对象的问题" tabindex="-1"><a class="header-anchor" href="#node对象转java对象的问题"><span>Node对象转Java对象的问题</span></a></h2><p>ObjectNode和TextNode转换成Java对象或类型时，需要使用该工具进行转换，否则会报错。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>wk<span class="token punctuation">.</span>workflow<span class="token punctuation">.</span>infrastructure<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">ObjectNode</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span></span><span class="token class-name">TextNode</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@program</span>: workflow-engine
 * <span class="token keyword">@description</span>: Node转换器
 * <span class="token keyword">@packagename</span>: com.wk.workflow.infrastructure.util
 * <span class="token keyword">@author</span>: 振振
 * <span class="token keyword">@date</span>: 2022-05-26 17:08
 **/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NodeCoverter2JavaUtils</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 溶解Node为Java 对象
     *
     * <span class="token keyword">@param</span> <span class="token parameter">value</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">dissolveNode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">ObjectNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ObjectNode</span> objectNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ObjectNode</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> values<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">TextNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TextNode</span> textNode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TextNode</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
            <span class="token class-name">String</span> textStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> textStr<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="风险" tabindex="-1"><a class="header-anchor" href="#风险"><span>风险</span></a></h1><p>Activiti7极致的面向对象设计与实现提高了二开的时间成本，对于使用者仅关注实现是不够的，期间隐藏着很微小的细节问题，很难遇见这些细节对特定场景、特定业务的影响，因此在实际开发中，应当注重验证，多次反复验证，结合现有业务场景、抽象一般场景进行验证。</p><p>这些微小的问题包括但不限于：</p><ol><li>表操作顺序（需要开启sql打印，需要比对数据变化、流转等）</li><li>事件触发（什么时候触发什么样的事件，宏观上显而易见，微观上有些微差异）</li></ol><p>等等...</p>`,17);function d(m,v){const t=p("ExternalLinkIcon");return c(),o("div",null,[u,s("p",null,[n("可以参考这篇"),s("a",k,[n("文章"),l(t)]),n("。")]),r])}const h=e(i,[["render",d],["__file","Activiti7 13 问题与风险.html.vue"]]),y=JSON.parse(`{"path":"/Activiti7%E7%AC%94%E8%AE%B0/Activiti7%2013%20%E9%97%AE%E9%A2%98%E4%B8%8E%E9%A3%8E%E9%99%A9.html","title":"问题与风险（QR）","lang":"zh-CN","frontmatter":{"description":"问题与风险（QR） 问题 定制任务结点、扩展任务属性 可以参考这篇文章。 使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方 解决方案： 调用 重试规则 重试依据 Node对象转Java对象的问题 ObjectNode和TextNode转换成Java对象或类型时，需要使用该工具进行转换，否则会报错。 风险 Activiti7极致的面向对象设计与实...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/Activiti7%E7%AC%94%E8%AE%B0/Activiti7%2013%20%E9%97%AE%E9%A2%98%E4%B8%8E%E9%A3%8E%E9%99%A9.html"}],["meta",{"property":"og:site_name","content":"郑振宁的数字资产中心"}],["meta",{"property":"og:title","content":"问题与风险（QR）"}],["meta",{"property":"og:description","content":"问题与风险（QR） 问题 定制任务结点、扩展任务属性 可以参考这篇文章。 使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方 解决方案： 调用 重试规则 重试依据 Node对象转Java对象的问题 ObjectNode和TextNode转换成Java对象或类型时，需要使用该工具进行转换，否则会报错。 风险 Activiti7极致的面向对象设计与实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T09:32:58.000Z"}],["meta",{"property":"article:author","content":"郑振宁"}],["meta",{"property":"article:modified_time","content":"2024-03-26T09:32:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"问题与风险（QR）\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T09:32:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"定制任务结点、扩展任务属性","slug":"定制任务结点、扩展任务属性","link":"#定制任务结点、扩展任务属性","children":[]},{"level":2,"title":"使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方","slug":"使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方","link":"#使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方","children":[]},{"level":2,"title":"Node对象转Java对象的问题","slug":"node对象转java对象的问题","link":"#node对象转java对象的问题","children":[]}],"git":{"createdTime":1711445578000,"updatedTime":1711445578000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":1}]},"readingTime":{"minutes":1.85,"words":556},"filePathRelative":"Activiti7笔记/Activiti7 13 问题与风险.md","localizedDate":"2024年3月26日","excerpt":"\\n<h1>问题</h1>\\n<h2>定制任务结点、扩展任务属性</h2>\\n<p>可以参考这篇<a href=\\"https://blog.csdn.net/makeryan/article/details/77000412\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">文章</a>。</p>\\n<h2>使用重试机制解决流程不匹配时仍导致监听触发推消息给业务方</h2>\\n<p>解决方案：</p>\\n<div class=\\"language-text\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"language-text\\"><code>// 重试组件\\ncompile 'com.github.rholder:guava-retrying:2.0.0'\\n</code></pre></div>","autoDesc":true}`);export{h as comp,y as data};

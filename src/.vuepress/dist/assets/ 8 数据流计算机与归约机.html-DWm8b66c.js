import{_ as t,c as o,o as n,d as r}from"./app-B4W1_6Ag.js";const s={},e=r('<h1 id="数据流计算机与归约机" tabindex="-1"><a class="header-anchor" href="#数据流计算机与归约机"><span>数据流计算机与归约机</span></a></h1><h1 id="简答题" tabindex="-1"><a class="header-anchor" href="#简答题"><span>简答题</span></a></h1><p>简述数据流计算机存在的问题。1710 1510 ** **</p><p>简述控制驱动的控制流方式和数据驱动的数据流方式的特点。1704</p><p>简述规约机的特点 <strong>1904</strong> <strong>1410</strong></p><h1 id="数据流计算机" tabindex="-1"><a class="header-anchor" href="#数据流计算机"><span>数据流计算机</span></a></h1><h2 id="数据驱动的概念" tabindex="-1"><a class="header-anchor" href="#数据驱动的概念"><span>数据驱动的概念</span></a></h2><p>指令和数据之间存在着各种<strong>相关</strong>以及操作控制的复杂化，都大大<strong>限制</strong>了控制流方式工作中计算<strong>并行性的开发</strong>。因此，开发并行性的<strong>另一种途径</strong>是完全摆脱 Von Neumann 型的<strong>程序计数器控制驱动</strong>的<strong>控制流方式</strong>，改用<strong>数据驱动</strong>的<strong>数据流方式</strong>来工作。</p><p><strong>数据驱动的数据流方式</strong>指的是，只要一条或一组指令所要求的操作数全部准备就绪，就可以立即激发相应的指令或指令组执行。执行结果的输出将送往等待这一数据的下一条或下一组指令。如果其中一些指令因此而使所需用到的数据全部准备就绪，就可以被激发执行。因此，在这种计算机上<strong>不需要程序计数器</strong>。指令的执行基本上是<strong>无序</strong>的，完全受数据流的驱动，与指令在程序中出现的先后顺序无关。</p><p><strong>控制驱动的控制流方式</strong>的特点是：通过访问共享存储单元让数据在指令之间传递；指令执行的顺序性隐含于控制流中，但却可以显式地使用专门的控制操作符来实现并行处理；<strong>指令执行的顺序受程序计数器控制</strong>，也就是受<strong>控制令牌</strong>所支配的。<strong>数据驱动的数据流方式</strong>则不同，它没有共享变量的概念，即没有共享存储数据的概念；指令执行顺序只受指令中数据相关性的制约；数据是以<strong>数据令牌方式</strong>直接在指令之间传递的。</p><p>上述的数据驱动计算只是数据流计算模型中的一种，还有另一种叫做<strong>需求驱动计算模型</strong>。</p><p><strong>数据驱动计算</strong>，其操作是按输人数据<strong>可用性</strong>决定的次序进行的，采取的是<strong>提前求值</strong>的策略。 <strong>^</strong></p><p><strong>需求驱动计算</strong>，其操作是按数据<strong>需求</strong>所决定的次序进行，采取的是<strong>滞后求值</strong>的策略。 <strong>^</strong></p><p>从语义上讲，数据流是基于<strong>异步性</strong>和<strong>函数性</strong>的一种计算模型。</p><p>所谓<strong>异步性</strong>，是指一旦操作数到齐就开始操作，这是数据流计算机开拓并行性的基础。</p><p>所谓<strong>函数性</strong>，是指每一数据流操作都是消耗一组输入值，产生一组输出值而不发生副作用，具有变量出现在赋值语句左边仅一次的单赋值特性，从而保证任何两个并发操作可以按任意次序执行，而不会相互干扰。</p><blockquote><p><strong>问</strong>：什么叫控制驱动、数据驱动、需求驱动？</p><p><strong>答</strong>：</p></blockquote><blockquote><p><strong>问</strong>：控制驱动的控制流方式和数据驱动的数据流方式的特点 <strong>^</strong></p><p><strong>答</strong>：从数据传递方式和指令执行限制谈</p><ol><li><strong>控制驱动的控制流方式的特点</strong>： <ol><li>① <u>指令间的数据传递</u>是通过访<strong>问共享存储单元</strong>实现的，有共享变量的概念；</li><li>② <u>指令执行</u>受制于<strong>程序计数器</strong>。</li></ol></li><li><strong>数据驱动的数据流方式的特点</strong>： <ol><li>① <u>指令间的数据传递</u>是通过<strong>数据令牌</strong>实现的，无共享变量的概念；</li><li>② <u>指令执行</u>受制于<strong>数据相关性</strong>；</li></ol></li></ol></blockquote><h2 id="数据流程序图和语言" tabindex="-1"><a class="header-anchor" href="#数据流程序图和语言"><span>数据流程序图和语言 **</span></a></h2><blockquote><p>详见：《计算机系统结构（2012版）》/李学干/p272</p></blockquote><h2 id="数据流计算的结构" tabindex="-1"><a class="header-anchor" href="#数据流计算的结构"><span>数据流计算的结构</span></a></h2><p>根据对<strong>数据令牌</strong>处理的方式不同,可以把数据流计算机的结构分成<strong>静态</strong>和<strong>动态</strong>两类。 <strong>^</strong></p><blockquote><p><strong>问</strong>：静态数据流和动态数据流的区别？ <strong>^</strong></p><p><strong>答</strong>：静的数据令牌未加标记，不支持递归的并发激活，只能支持一般的循环；动的数据令牌带有标记，支持递归的并发激活。</p></blockquote><h2 id="数据流计算机的问题" tabindex="-1"><a class="header-anchor" href="#数据流计算机的问题"><span>数据流计算机的问题</span></a></h2><blockquote><p><strong>问</strong>：数据流计算机存在的问题 <strong>^</strong></p><p><strong>答</strong>：从 效率 / 开销 / 控制 / 设计 / 维护 上谈其问题。</p><ol><li>效率上，数据相关性强，内涵并行性少时，其效率比冯诺依曼型机器低；</li><li>开销上，处理数据要花费较多的辅助开销和较大的存储空间；不能<strong>保存数组</strong>。处理大型组时，会<strong>增加额外的传输开销</strong>。</li><li>控制上，变量即为值的特性使得程序员无法控制存储分配；</li><li>设计上，<strong>互连网络设计困难</strong>，<strong>输入/输出系统不完善</strong>；</li><li>维护上，<strong>没有程序计数器</strong>，诊断和维护困难。</li></ol></blockquote><h2 id="数据流计算机的发展-·" tabindex="-1"><a class="header-anchor" href="#数据流计算机的发展-·"><span>数据流计算机的发展 ·</span></a></h2><blockquote><p>详见：《计算机系统结构（2012版）》/李学干/p276</p></blockquote><h1 id="归约机" tabindex="-1"><a class="header-anchor" href="#归约机"><span>归约机</span></a></h1><blockquote><p><strong>问</strong>：简述归约机的驱动方式、工作原理、结构特点以及两种构型 <strong>^</strong></p><p><strong>答</strong>：</p><p>【驱动方式】需求驱动。</p><p>【工作原理】在归约机中，对数据的需求又来源于<strong>函数式程序设计语言对表达式的归约</strong>。</p><p>【结构特点】采用<strong>面向函数式</strong>语言；采用多处理机并行、互连的构形；采用<strong>大容量物理存储器和虚拟存储器</strong> ，动态存储分配高效；数据向结点机、处理机靠拢。</p><p>【两种构型】归约机有<strong>串归约</strong>和<strong>图归约</strong>两种构型。</p></blockquote>',29),g=[e];function a(p,l){return n(),o("div",null,g)}const c=t(s,[["render",a],["__file"," 8 数据流计算机与归约机.html.vue"]]),h=JSON.parse('{"path":"/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%208%20%E6%95%B0%E6%8D%AE%E6%B5%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E5%BD%92%E7%BA%A6%E6%9C%BA.html","title":"数据流计算机与归约机","lang":"zh-CN","frontmatter":{"title":"数据流计算机与归约机","order":8,"icon":"file","category":["系统结构","理论基础"],"description":"数据流计算机与归约机 简答题 简述数据流计算机存在的问题。1710 1510 ** ** 简述控制驱动的控制流方式和数据驱动的数据流方式的特点。1704 简述规约机的特点 1904 1410 数据流计算机 数据驱动的概念 指令和数据之间存在着各种相关以及操作控制的复杂化，都大大限制了控制流方式工作中计算并行性的开发。因此，开发并行性的另一种途径是完全摆...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/yibu_zzn/%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84/%208%20%E6%95%B0%E6%8D%AE%E6%B5%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8E%E5%BD%92%E7%BA%A6%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"郑振宁的数字资产中心"}],["meta",{"property":"og:title","content":"数据流计算机与归约机"}],["meta",{"property":"og:description","content":"数据流计算机与归约机 简答题 简述数据流计算机存在的问题。1710 1510 ** ** 简述控制驱动的控制流方式和数据驱动的数据流方式的特点。1704 简述规约机的特点 1904 1410 数据流计算机 数据驱动的概念 指令和数据之间存在着各种相关以及操作控制的复杂化，都大大限制了控制流方式工作中计算并行性的开发。因此，开发并行性的另一种途径是完全摆..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-12T02:36:39.000Z"}],["meta",{"property":"article:author","content":"郑振宁"}],["meta",{"property":"article:modified_time","content":"2024-04-12T02:36:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据流计算机与归约机\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-12T02:36:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"郑振宁\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"数据驱动的概念","slug":"数据驱动的概念","link":"#数据驱动的概念","children":[]},{"level":2,"title":"数据流程序图和语言 **","slug":"数据流程序图和语言","link":"#数据流程序图和语言","children":[]},{"level":2,"title":"数据流计算的结构","slug":"数据流计算的结构","link":"#数据流计算的结构","children":[]},{"level":2,"title":"数据流计算机的问题","slug":"数据流计算机的问题","link":"#数据流计算机的问题","children":[]},{"level":2,"title":"数据流计算机的发展 ·","slug":"数据流计算机的发展-·","link":"#数据流计算机的发展-·","children":[]}],"git":{"createdTime":1712889399000,"updatedTime":1712889399000,"contributors":[{"name":"一步","email":"zzn_workmail@163.com","commits":1}]},"readingTime":{"minutes":4.89,"words":1466},"filePathRelative":"系统结构/ 8 数据流计算机与归约机.md","localizedDate":"2024年4月12日","excerpt":"\\n<h1>简答题</h1>\\n<p>简述数据流计算机存在的问题。1710 1510 ** **</p>\\n<p>简述控制驱动的控制流方式和数据驱动的数据流方式的特点。1704</p>\\n<p>简述规约机的特点 <strong>1904</strong> <strong>1410</strong></p>\\n<h1>数据流计算机</h1>\\n<h2>数据驱动的概念</h2>\\n<p>指令和数据之间存在着各种<strong>相关</strong>以及操作控制的复杂化，都大大<strong>限制</strong>了控制流方式工作中计算<strong>并行性的开发</strong>。因此，开发并行性的<strong>另一种途径</strong>是完全摆脱 Von Neumann 型的<strong>程序计数器控制驱动</strong>的<strong>控制流方式</strong>，改用<strong>数据驱动</strong>的<strong>数据流方式</strong>来工作。</p>","autoDesc":true}');export{c as comp,h as data};
